{"ast":null,"code":"export default {\n  name: 'GameScreen',\n  data() {\n    return {\n      canvasWidth: 1920,\n      // Width of the canvas\n      canvasHeight: 900,\n      // Height of the canvas\n      map: [],\n      // 2D Array for the terrain\n      tank: null,\n      tankX: 100,\n      // Initial X position of the tank\n      tankY: 505 // Initial Y position of the tank\n    };\n  },\n  mounted() {\n    this.initializeMap();\n    this.loadTankImage();\n    window.addEventListener('keydown', this.handleKeyDown); // Listen for keydown events\n  },\n  beforeUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown); // Clean up the event listener\n  },\n  methods: {\n    loadTankImage() {\n      this.tankImage = new Image();\n      this.tankImage.src = '/assets/tank.png'; // Replace with your SVG path\n\n      // Wait for the image to load before drawing the map\n      this.tankImage.onload = () => {\n        this.drawMap(); // Draw the map after the tank image has loaded\n      };\n    },\n    // Initialize the map with ground and sky\n    initializeMap() {\n      const groundLevel = 550; // Set ground level in pixels\n\n      // Create a 2D array (matrix) representing the map\n      this.map = Array(this.canvasHeight).fill().map((_, y) => Array(this.canvasWidth).fill().map(() => y >= groundLevel ? 1 : 0));\n    },\n    // Draw the map using canvas\n    drawMap() {\n      const canvas = document.getElementById('gameCanvas');\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Loop through the map array and draw each pixel\n      for (let y = 0; y < this.map.length; y++) {\n        for (let x = 0; x < this.map[y].length; x++) {\n          ctx.fillStyle = this.map[y][x] === 1 ? 'green' : 'skyblue'; // Set color based on terrain\n          ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n        }\n      }\n      ctx.drawImage(this.tankImage, this.tankX, this.tankY, 75, 45); // Adjust width and height as needed\n    },\n    handleKeyDown(event) {\n      const step = 10; // Number of pixels to move the tank\n\n      switch (event.key) {\n        case 'ArrowLeft':\n          this.tankX -= step; // Move left\n          break;\n        case 'ArrowRight':\n          this.tankX += step; // Move right\n          break;\n      }\n\n      // Ensure the tank stays within the canvas boundaries\n      if (this.tankX < 0) this.tankX = 0; // Prevent moving out of bounds to the left\n      if (this.tankX > this.canvasWidth - 50) this.tankX = this.canvasWidth - 50; // Prevent moving out of bounds to the right\n\n      this.drawMap(); // Redraw the map with the updated tank position\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvasWidth","canvasHeight","map","tank","tankX","tankY","mounted","initializeMap","loadTankImage","window","addEventListener","handleKeyDown","beforeUnmount","removeEventListener","methods","tankImage","Image","src","onload","drawMap","groundLevel","Array","fill","_","y","canvas","document","getElementById","ctx","getContext","clearRect","length","x","fillStyle","fillRect","drawImage","event","step","key"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n\n    <div class=\"flex justify-center items-center min-h-screen bg-grey-300\">\n        <div style=\"margin-top: 180px;\">\n            <canvas id=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" class=\"flex justify-end\"></canvas>\n        </div>\n    </div>\n\n\n  </template>\n  \n  <script>\n  export default {\n    name: 'GameScreen',\n    data() {\n      return {\n        canvasWidth: 1920,  // Width of the canvas\n        canvasHeight: 900, // Height of the canvas\n        map: [], // 2D Array for the terrain\n        tank: null,\n        tankX: 100, // Initial X position of the tank\n        tankY: 505, // Initial Y position of the tank\n      };\n    },\n    mounted() {\n        this.initializeMap();\n        this.loadTankImage();\n        window.addEventListener('keydown', this.handleKeyDown); // Listen for keydown events\n    },\n    beforeUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown); // Clean up the event listener\n    },\n    methods: {\n        loadTankImage() {\n            this.tankImage = new Image();\n            this.tankImage.src = '/assets/tank.png'; // Replace with your SVG path\n\n            // Wait for the image to load before drawing the map\n            this.tankImage.onload = () => {\n                this.drawMap(); // Draw the map after the tank image has loaded\n            };\n        },\n\n        // Initialize the map with ground and sky\n        initializeMap() {\n            const groundLevel = 550; // Set ground level in pixels\n            \n            // Create a 2D array (matrix) representing the map\n            this.map = Array(this.canvasHeight).fill().map((_, y) => \n                Array(this.canvasWidth).fill().map(() => (y >= groundLevel ? 1 : 0))\n            );\n        },\n\n\n    // Draw the map using canvas\n        drawMap() {\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            \n            ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n            // Loop through the map array and draw each pixel\n            for (let y = 0; y < this.map.length; y++) {\n                for (let x = 0; x < this.map[y].length; x++) {\n                    ctx.fillStyle = this.map[y][x] === 1 ? 'green': 'skyblue'; // Set color based on terrain\n                    ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n                }\n            }\n\n            ctx.drawImage(this.tankImage, this.tankX, this.tankY, 75, 45); // Adjust width and height as needed\n        },\n\n        handleKeyDown(event) {\n            const step = 10; // Number of pixels to move the tank\n\n            switch (event.key) {\n                case 'ArrowLeft':\n                    this.tankX -= step; // Move left\n                    break;\n                case 'ArrowRight':\n                    this.tankX += step; // Move right\n                    break;\n            }\n\n            // Ensure the tank stays within the canvas boundaries\n            if (this.tankX < 0) this.tankX = 0; // Prevent moving out of bounds to the left\n            if (this.tankX > this.canvasWidth - 50) this.tankX = this.canvasWidth - 50; // Prevent moving out of bounds to the right\n\n            this.drawMap(); // Redraw the map with the updated tank position\n        },\n    }\n  };\n  </script>\n  \n  <style scoped>\n\n    .row {\n    display: flex;\n    }\n\n    .pixel {\n    width: 10px;\n    height: 10px;\n    }\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}