{"ast":null,"code":"export default {\n  name: 'GameScreen',\n  data() {\n    return {\n      canvasWidth: 1920,\n      // Width of the canvas\n      canvasHeight: 900,\n      // Height of the canvas\n      map: [],\n      // 2D Array for the terrain\n      tankImage: null,\n      // To store the loaded tank image\n      tankX: 100,\n      // Initial X position of the tank\n      tankY: 500,\n      // Initial Y position of the tank\n      moveLeft: false,\n      // Flag for moving left\n      moveRight: false,\n      // Flag for moving right\n      gameLoop: null,\n      // Reference to the game loop\n      step: 20 // Number of pixels to move the tank each frame\n    };\n  },\n  mounted() {\n    this.loadTankImage(); // Load the tank image\n    this.initializeMap();\n    window.addEventListener('keydown', this.handleKeyDown); // Listen for keydown events\n    window.addEventListener('keyup', this.handleKeyUp); // Listen for keyup events\n    this.startGameLoop(); // Start the game loop\n  },\n  beforeUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown); // Clean up the event listener\n    window.removeEventListener('keyup', this.handleKeyUp); // Clean up the event listener\n    cancelAnimationFrame(this.gameLoop); // Stop the game loop\n  },\n  methods: {\n    loadTankImage() {\n      this.tankImage = new Image();\n      this.tankImage.src = 'assets/tank.png'; // Replace with your SVG path\n\n      // Wait for the image to load before drawing the map\n      this.tankImage.onload = () => {\n        this.drawMap(); // Draw the map after the tank image has loaded\n      };\n    },\n    initializeMap() {\n      const groundLevel = 550; // Set ground level in pixels\n\n      // Create a 2D array (matrix) representing the map\n      this.map = Array(this.canvasHeight).fill().map((_, y) => Array(this.canvasWidth).fill().map(() => y >= groundLevel ? 1 : 0));\n    },\n    drawMap() {\n      const canvas = document.getElementById('gameCanvas');\n      const ctx = canvas.getContext('2d');\n\n      // Clear the canvas\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Loop through the map array and draw each pixel\n      for (let y = 0; y < this.map.length; y++) {\n        for (let x = 0; x < this.map[y].length; x++) {\n          ctx.fillStyle = this.map[y][x] === 1 ? 'green' : 'skyblue'; // Set color based on terrain\n          ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n        }\n      }\n\n      // Draw the tank at its current position\n      ctx.drawImage(this.tankImage, this.tankX, this.tankY, 50, 30); // Adjust width and height as needed\n    },\n    handleKeyDown(event) {\n      switch (event.key) {\n        case 'ArrowLeft':\n          this.moveLeft = true; // Set flag to move left\n          break;\n        case 'ArrowRight':\n          this.moveRight = true; // Set flag to move right\n          break;\n      }\n    },\n    handleKeyUp(event) {\n      switch (event.key) {\n        case 'ArrowLeft':\n          this.moveLeft = false; // Clear flag to stop moving left\n          break;\n        case 'ArrowRight':\n          this.moveRight = false; // Clear flag to stop moving right\n          break;\n      }\n    },\n    startGameLoop() {\n      const update = () => {\n        if (this.moveLeft) {\n          this.tankX -= this.step; // Move left\n        }\n        if (this.moveRight) {\n          this.tankX += this.step; // Move right\n        }\n\n        // Ensure the tank stays within the canvas boundaries\n        if (this.tankX < 0) this.tankX = 0; // Prevent moving out of bounds to the left\n        if (this.tankX > this.canvasWidth - 50) this.tankX = this.canvasWidth - 50; // Prevent moving out of bounds to the right\n\n        this.drawMap(); // Redraw the map with the updated tank position\n\n        this.gameLoop = requestAnimationFrame(update); // Continue the game loop\n      };\n      this.gameLoop = requestAnimationFrame(update); // Start the game loop\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvasWidth","canvasHeight","map","tankImage","tankX","tankY","moveLeft","moveRight","gameLoop","step","mounted","loadTankImage","initializeMap","window","addEventListener","handleKeyDown","handleKeyUp","startGameLoop","beforeUnmount","removeEventListener","cancelAnimationFrame","methods","Image","src","onload","drawMap","groundLevel","Array","fill","_","y","canvas","document","getElementById","ctx","getContext","clearRect","length","x","fillStyle","fillRect","drawImage","event","key","update","requestAnimationFrame"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<!-- <template>\n\n    <div class=\"flex justify-center items-center min-h-screen bg-grey-300\">\n        <div style=\"margin-top: 180px;\">\n            <canvas id=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" class=\"flex justify-end\"></canvas>\n        </div>\n    </div>\n\n\n  </template>\n  \n  <script>\n  export default {\n    name: 'GameScreen',\n    data() {\n      return {\n        canvasWidth: 1920,  // Width of the canvas\n        canvasHeight: 900, // Height of the canvas\n        map: [], // 2D Array for the terrain\n        tank: null,\n        tankX: 100, // Initial X position of the tank\n        tankY: 505, // Initial Y position of the tank\n      };\n    },\n    mounted() {\n        this.initializeMap();\n        this.loadTankImage();\n        window.addEventListener('keydown', this.handleKeyDown); // Listen for keydown events\n    },\n    beforeUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown); // Clean up the event listener\n    },\n    methods: {\n        loadTankImage() {\n            this.tankImage = new Image();\n            this.tankImage.src = '/assets/tank.png'; // Replace with your SVG path\n\n            // Wait for the image to load before drawing the map\n            this.tankImage.onload = () => {\n                this.drawMap(); // Draw the map after the tank image has loaded\n            };\n        },\n\n        // Initialize the map with ground and sky\n        initializeMap() {\n            const groundLevel = 550; // Set ground level in pixels\n            \n            // Create a 2D array (matrix) representing the map\n            this.map = Array(this.canvasHeight).fill().map((_, y) => \n                Array(this.canvasWidth).fill().map(() => (y >= groundLevel ? 1 : 0))\n            );\n        },\n\n\n    // Draw the map using canvas\n        drawMap() {\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            \n            ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n            // Loop through the map array and draw each pixel\n            for (let y = 0; y < this.map.length; y++) {\n                for (let x = 0; x < this.map[y].length; x++) {\n                    ctx.fillStyle = this.map[y][x] === 1 ? 'green': 'skyblue'; // Set color based on terrain\n                    ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n                }\n            }\n\n            ctx.drawImage(this.tankImage, this.tankX, this.tankY, 75, 45); // Adjust width and height as needed\n        },\n\n        handleKeyDown(event) {\n            const step = 10; // Number of pixels to move the tank\n\n            switch (event.key) {\n                case 'ArrowLeft':\n                    this.tankX -= step; // Move left\n                    break;\n                case 'ArrowRight':\n                    this.tankX += step; // Move right\n                    break;\n            }\n\n            // Ensure the tank stays within the canvas boundaries\n            if (this.tankX < 0) this.tankX = 0; // Prevent moving out of bounds to the left\n            if (this.tankX > this.canvasWidth - 50) this.tankX = this.canvasWidth - 50; // Prevent moving out of bounds to the right\n\n            this.drawMap(); // Redraw the map with the updated tank position\n        },\n    }\n  };\n  </script>\n  \n  <style scoped>\n\n    .row {\n    display: flex;\n    }\n\n    .pixel {\n    width: 1px;\n    height: 1px;\n    }\n</style> -->\n\n<template>\n    <div class=\"flex justify-center items-center min-h-screen bg-grey-300\">\n        <div style=\"margin-top: 180px;\">\n            <canvas id=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" class=\"flex justify-end\"></canvas>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'GameScreen',\n    data() {\n        return {\n            canvasWidth: 1920,  // Width of the canvas\n            canvasHeight: 900, // Height of the canvas\n            map: [], // 2D Array for the terrain\n            tankImage: null, // To store the loaded tank image\n            tankX: 100, // Initial X position of the tank\n            tankY: 500, // Initial Y position of the tank\n            moveLeft: false, // Flag for moving left\n            moveRight: false, // Flag for moving right\n            gameLoop: null, // Reference to the game loop\n            step: 20, // Number of pixels to move the tank each frame\n        };\n    },\n    mounted() {\n        this.loadTankImage(); // Load the tank image\n        this.initializeMap();\n        window.addEventListener('keydown', this.handleKeyDown); // Listen for keydown events\n        window.addEventListener('keyup', this.handleKeyUp); // Listen for keyup events\n        this.startGameLoop(); // Start the game loop\n    },\n    beforeUnmount() {\n        window.removeEventListener('keydown', this.handleKeyDown); // Clean up the event listener\n        window.removeEventListener('keyup', this.handleKeyUp); // Clean up the event listener\n        cancelAnimationFrame(this.gameLoop); // Stop the game loop\n    },\n    methods: {\n        loadTankImage() {\n            this.tankImage = new Image();\n            this.tankImage.src = 'assets/tank.png'; // Replace with your SVG path\n\n            // Wait for the image to load before drawing the map\n            this.tankImage.onload = () => {\n                this.drawMap(); // Draw the map after the tank image has loaded\n            };\n        },\n\n        initializeMap() {\n            const groundLevel = 550; // Set ground level in pixels\n            \n            // Create a 2D array (matrix) representing the map\n            this.map = Array(this.canvasHeight).fill().map((_, y) => \n                Array(this.canvasWidth).fill().map(() => (y >= groundLevel ? 1 : 0))\n            );\n        },\n\n        drawMap() {\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            \n            // Clear the canvas\n            ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n            // Loop through the map array and draw each pixel\n            for (let y = 0; y < this.map.length; y++) {\n                for (let x = 0; x < this.map[y].length; x++) {\n                    ctx.fillStyle = this.map[y][x] === 1 ? 'green' : 'skyblue'; // Set color based on terrain\n                    ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n                }\n            }\n\n            // Draw the tank at its current position\n            ctx.drawImage(this.tankImage, this.tankX, this.tankY, 50, 30); // Adjust width and height as needed\n        },\n\n        handleKeyDown(event) {\n            switch (event.key) {\n                case 'ArrowLeft':\n                    this.moveLeft = true; // Set flag to move left\n                    break;\n                case 'ArrowRight':\n                    this.moveRight = true; // Set flag to move right\n                    break;\n            }\n        },\n\n        handleKeyUp(event) {\n            switch (event.key) {\n                case 'ArrowLeft':\n                    this.moveLeft = false; // Clear flag to stop moving left\n                    break;\n                case 'ArrowRight':\n                    this.moveRight = false; // Clear flag to stop moving right\n                    break;\n            }\n        },\n\n        startGameLoop() {\n            const update = () => {\n                if (this.moveLeft) {\n                    this.tankX -= this.step; // Move left\n                }\n                if (this.moveRight) {\n                    this.tankX += this.step; // Move right\n                }\n\n                // Ensure the tank stays within the canvas boundaries\n                if (this.tankX < 0) this.tankX = 0; // Prevent moving out of bounds to the left\n                if (this.tankX > this.canvasWidth - 50) this.tankX = this.canvasWidth - 50; // Prevent moving out of bounds to the right\n\n                this.drawMap(); // Redraw the map with the updated tank position\n\n                this.gameLoop = requestAnimationFrame(update); // Continue the game loop\n            };\n\n            this.gameLoop = requestAnimationFrame(update); // Start the game loop\n        },\n    }\n};\n</script>\n\n<style scoped>\n.row {\n    display: flex;\n}\n.pixel {\n    width: 10px;\n    height: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}