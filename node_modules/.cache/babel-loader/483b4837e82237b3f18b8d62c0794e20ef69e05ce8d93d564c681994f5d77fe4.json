{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-screen text-center mt-20\"\n};\nconst _hoisted_2 = {\n  class: \"block\"\n};\nconst _hoisted_3 = {\n  class: \"font-bold\"\n};\nconst _hoisted_4 = {\n  class: \"text-2xl\"\n};\nconst _hoisted_5 = {\n  class: \"controls mt-4 flex justify-center items-center gap-4\"\n};\nconst _hoisted_6 = {\n  class: \"block font-bold\"\n};\nconst _hoisted_7 = {\n  class: \"block font-bold\"\n};\nconst _hoisted_8 = {\n  class: \"w-1280 h-150 m-auto\",\n  style: {\n    \"background\": \"url('assets/metalbg.png') no-repeat center center\",\n    \"background-size\": \"cover\"\n  }\n};\nconst _hoisted_9 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", {\n    class: \"text-2xl font-bold mb-4\"\n  }, \"Tanks\", -1 /* HOISTED */)), _createElementVNode(\"label\", _hoisted_2, [_createElementVNode(\"span\", _hoisted_3, [_cache[3] || (_cache[3] = _createTextVNode(\"Wind: \")), _createElementVNode(\"span\", _hoisted_4, _toDisplayString($data.wind), 1 /* TEXT */)]), _cache[4] || (_cache[4] = _createTextVNode(\" (positive for right, negative for left)\"))]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", null, [_createElementVNode(\"label\", _hoisted_6, \"Angle: \" + _toDisplayString($data.angle) + \"°\", 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    min: \"0\",\n    max: \"90\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.angle = $event),\n    class: \"w-32\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.angle]])]), _createElementVNode(\"div\", null, [_createElementVNode(\"label\", _hoisted_7, \"Power: \" + _toDisplayString($data.power), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    min: \"10\",\n    max: \"100\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.power = $event),\n    class: \"w-32\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.power]])]), _createCommentVNode(\" <button @click=\\\"fireMissile\\\" class=\\\"px-6 py-2 bg-red-500 bg-opacity-50 text-black rounded hover:bg-red-600\\\">FIRE</button> \")]), _createCommentVNode(\" <img\\n        src=\\\"assets/metalbg.png\\\"\\n        alt=\\\"Game Overlay\\\"\\n        class=\\\"w-1280 h-150 opacity-75 pointer-events-none m-auto\\\"\\n      /> \"), _createElementVNode(\"div\", _hoisted_8, [_createCommentVNode(\" <button class=\\\"absolute top-4 left-4 bg-blue-500 text-white px-4 py-2 rounded\\\">\\n        Button 1\\n      </button>\\n      <button class=\\\"absolute top-4 right-4 bg-green-500 text-white px-4 py-2 rounded\\\">\\n        Button 2\\n      </button>\\n      <button class=\\\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded\\\">\\n        Button 3\\n      </button> \"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.fireMissile && $options.fireMissile(...args)),\n    class: \"px-6 py-2 bg-red-500 bg-opacity-50 text-black rounded hover:bg-red-600\"\n  }, \"FIRE\")])]), _createElementVNode(\"canvas\", {\n    ref: \"gameCanvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight,\n    class: \"border border-gray-700 m-auto\"\n  }, null, 8 /* PROPS */, _hoisted_9)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","_hoisted_3","_createTextVNode","_hoisted_4","_toDisplayString","$data","wind","_hoisted_5","_hoisted_6","angle","type","min","max","_cache","$event","_hoisted_7","power","_createCommentVNode","_hoisted_8","onClick","args","$options","fireMissile","ref","width","canvasWidth","height","canvasHeight","_hoisted_9"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n    <div class=\"game-screen text-center mt-20\">\n      <h1 class=\"text-2xl font-bold mb-4\">Tanks</h1>\n      <label class=\"block\"><span class=\"font-bold\">Wind: <span class=\"text-2xl\">{{ wind }}</span> </span>  (positive for right, negative for left)</label>\n      <div class=\"controls mt-4 flex justify-center items-center gap-4\">\n        <div>\n          <label class=\"block font-bold\">Angle: {{ angle }}°</label>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"90\" \n            v-model=\"angle\" \n            class=\"w-32\"\n          />\n        </div>\n        <div>\n          <label class=\"block font-bold\">Power: {{ power }}</label>\n          <input \n            type=\"range\" \n            min=\"10\" \n            max=\"100\" \n            v-model=\"power\" \n            class=\"w-32\"\n          />\n        </div>\n        <!-- <button @click=\"fireMissile\" class=\"px-6 py-2 bg-red-500 bg-opacity-50 text-black rounded hover:bg-red-600\">FIRE</button> -->\n      </div>\n      <!-- <img\n        src=\"assets/metalbg.png\"\n        alt=\"Game Overlay\"\n        class=\"w-1280 h-150 opacity-75 pointer-events-none m-auto\"\n      /> -->\n      <div\n      class=\"w-1280 h-150 m-auto\"\n      style=\"background: url('assets/metalbg.png') no-repeat center center; background-size: cover;\">\n      <!-- <button class=\"absolute top-4 left-4 bg-blue-500 text-white px-4 py-2 rounded\">\n        Button 1\n      </button>\n      <button class=\"absolute top-4 right-4 bg-green-500 text-white px-4 py-2 rounded\">\n        Button 2\n      </button>\n      <button class=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white px-4 py-2 rounded\">\n        Button 3\n      </button> -->\n      <button @click=\"fireMissile\" class=\"px-6 py-2 bg-red-500 bg-opacity-50 text-black rounded hover:bg-red-600\">FIRE</button>\n        </div>\n    </div>\n      <canvas \n        ref=\"gameCanvas\" \n        :width=\"canvasWidth\" \n        :height=\"canvasHeight\" \n        class=\"border border-gray-700 m-auto\"\n      ></canvas>\n\n  </template>\n  \n  <script>\n  export default {\n    name: \"GameScreen\",\n    data() {\n      return {\n        canvasWidth: 1280,\n        canvasHeight: 720,\n        terrain: [],\n        player1: {\n          x: 100,\n          y: 370,\n          size: 40,\n          angle: 45,\n          power: 50,\n          tankColor: \"green\",\n        },\n        wind: 0,\n        missile: null,\n        angle: 45,\n        power: 50,\n        gameOver: false,\n      };\n    },\n    mounted() {\n      this.wind = Math.floor(Math.random() * 100 - 50); \n      this.player1.tankColor = \"green\"; //this.$route.query.color;\n      this.generateTerrain();\n      this.renderGame();\n    },\n    methods: {\n      generateTerrain() {\n        // Generate a simple random terrain\n        this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n          const baseHeight = this.canvasHeight - 200;\n          const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n          return baseHeight + variation;\n        });\n      },\n      fireMissile() {\n        const startX = this.player1.x + 15;\n        const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n        const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n        const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n        const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n        const endY = this.canvasHeight;\n  \n        this.missile = {\n          t: 0,\n          startX,\n          startY,\n          controlX,\n          controlY,\n          endX,\n          endY,\n        };\n  \n        this.animateMissile();\n      },\n      animateMissile() {\n        if (!this.missile) return;\n  \n        const { t, startX, startY, controlX, controlY, endX, endY } = this.missile;\n  \n        const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n        const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n  \n        this.missile.t += 0.01;\n        if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n          this.explodeTerrain(x, y);\n          this.missile = null;\n          this.gameOver = true;\n          return;\n        }\n  \n        this.renderGame();\n  \n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n  \n        requestAnimationFrame(this.animateMissile);\n      },\n      checkTerrainCollision(x, y) {\n        // Check if the missile hit the terrain\n        return y >= this.terrain[Math.floor(x)];\n      },\n      explodeTerrain(x, y) {\n        // Create a circular explosion in the terrain\n        const explosionRadius = 20;\n        for (let i = -explosionRadius; i <= explosionRadius; i++) {\n          const pos = Math.floor(x) + i;\n          if (pos >= 0 && pos < this.canvasWidth) {\n            const distance = Math.sqrt(i * i);\n            if (distance <= explosionRadius) {\n              const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n              this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n            }\n          }\n        }\n        this.renderGame();\n        this.wind = Math.floor(Math.random() * 100 - 50); \n\n      },\n      renderGame() {\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  \n        // Draw the terrain\n        this.drawTerrain(ctx);\n  \n        // Draw player 1's tank\n        this.drawTank(ctx, this.player1);\n      },\n      drawTerrain(ctx) {\n        ctx.beginPath();\n        ctx.moveTo(0, this.canvasHeight);\n        for (let x = 0; x < this.terrain.length; x++) {\n          ctx.lineTo(x, this.terrain[x]);\n        }\n        ctx.lineTo(this.canvasWidth, this.canvasHeight);\n        ctx.closePath();\n        ctx.fillStyle = \"saddlebrown\";\n        ctx.fill();\n      },\n      drawTank(ctx, player) {\n        ctx.save();\n        ctx.translate(player.x, this.terrain[Math.floor(player.x)] - player.size / 2);\n  \n        // Draw the tank body\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n  \n        // Draw the tank turret\n        const turretLength = player.size * 0.7;\n        ctx.translate(0, -player.size / 7);\n        ctx.rotate((-this.angle * Math.PI) / 180);\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(0, -5, turretLength, 10);\n  \n        ctx.restore();\n      },\n    },\n  };\n  </script>\n"],"mappings":";;EACSA,KAAK,EAAC;AAA+B;;EAEjCA,KAAK,EAAC;AAAO;;EAAOA,KAAK,EAAC;AAAW;;EAAaA,KAAK,EAAC;AAAU;;EACpEA,KAAK,EAAC;AAAsD;;EAEtDA,KAAK,EAAC;AAAiB;;EAUvBA,KAAK,EAAC;AAAiB;;EAiBlCA,KAAK,EAAC,qBAAqB;EAC3BC,KAA8F,EAA9F;IAAA;IAAA;EAAA;;mBAlCN;;uBAAAC,mBAAA,CAAAC,SAAA,SACIC,mBAAA,CA6CM,OA7CNC,UA6CM,G,0BA5CJD,mBAAA,CAA8C;IAA1CJ,KAAK,EAAC;EAAyB,GAAC,OAAK,sBACzCI,mBAAA,CAAoJ,SAApJE,UAAoJ,GAA/HF,mBAAA,CAA8E,QAA9EG,UAA8E,G,0BAHzGC,gBAAA,CAGmD,QAAM,IAAAJ,mBAAA,CAAwC,QAAxCK,UAAwC,EAAAC,gBAAA,CAAdC,KAAA,CAAAC,IAAI,iB,6BAHvFJ,gBAAA,CAGyG,0CAAyC,G,GAC5IJ,mBAAA,CAsBM,OAtBNS,UAsBM,GArBJT,mBAAA,CASM,cARJA,mBAAA,CAA0D,SAA1DU,UAA0D,EAA3B,SAAO,GAAAJ,gBAAA,CAAGC,KAAA,CAAAI,KAAK,IAAG,GAAC,iB,gBAClDX,mBAAA,CAME;IALAY,IAAI,EAAC,OAAO;IACZC,GAAG,EAAC,GAAG;IACPC,GAAG,EAAC,IAAI;IAVpB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWqBT,KAAA,CAAAI,KAAK,GAAAK,MAAA;IACdpB,KAAK,EAAC;iDADGW,KAAA,CAAAI,KAAK,E,KAIlBX,mBAAA,CASM,cARJA,mBAAA,CAAyD,SAAzDiB,UAAyD,EAA1B,SAAO,GAAAX,gBAAA,CAAGC,KAAA,CAAAW,KAAK,kB,gBAC9ClB,mBAAA,CAME;IALAY,IAAI,EAAC,OAAO;IACZC,GAAG,EAAC,IAAI;IACRC,GAAG,EAAC,KAAK;IApBrB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAqBqBT,KAAA,CAAAW,KAAK,GAAAF,MAAA;IACdpB,KAAK,EAAC;iDADGW,KAAA,CAAAW,KAAK,E,KAIlBC,mBAAA,mIAAkI,C,GAEpIA,mBAAA,4JAIM,EACNnB,mBAAA,CAaQ,OAbRoB,UAaQ,GAVRD,mBAAA,mZAQa,EACbnB,mBAAA,CAAyH;IAAhHqB,OAAK,EAAAN,MAAA,QAAAA,MAAA,UAAAO,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAE1B,KAAK,EAAC;KAAyE,MAAI,E,KAGhHI,mBAAA,CAKU;IAJRyB,GAAG,EAAC,YAAY;IACfC,KAAK,EAAEnB,KAAA,CAAAoB,WAAW;IAClBC,MAAM,EAAErB,KAAA,CAAAsB,YAAY;IACrBjC,KAAK,EAAC;0BAnDdkC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}