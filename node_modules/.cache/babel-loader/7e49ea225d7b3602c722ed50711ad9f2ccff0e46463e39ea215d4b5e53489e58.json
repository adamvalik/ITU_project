{"ast":null,"code":"//import axios from 'axios';\nexport default {\n  name: \"GameScreen\",\n  data() {\n    return {\n      canvasWidth: 1280,\n      canvasHeight: 720,\n      terrain: [],\n      player1: {\n        x: 100,\n        y: 370,\n        size: 40,\n        angle: 45,\n        power: 50,\n        tankColor: \"green\",\n        name: \"DJ Khaled\",\n        health: 100\n      },\n      mousePosition: {\n        x: 0,\n        y: 0\n      },\n      isHovering: false,\n      aimCircleRadius: 200,\n      maxShotPower: 100,\n      minShotPower: 1,\n      minShotDistance: 50,\n      stopLine: false,\n      lineStopX: 200,\n      lineStopY: 400,\n      isDragging: false,\n      imgTank: null,\n      wind: 0,\n      missile: null,\n      angle: 45,\n      power: 50,\n      gameOver: false,\n      fireHelpVisible: false,\n      time: 10,\n      money: 4000,\n      fuel: 100,\n      fuelMax: 250,\n      wins: 1\n    };\n  },\n  mounted() {\n    //this.obtainTankSVG();\n    this.wind = 0; //Math.floor(Math.random() * 100 - 50); \n    this.player1.tankColor = \"green\"; //this.$route.query.color;\n    this.startTimer();\n    this.generateTerrain();\n    this.renderGame();\n    //const canvas = this.$refs.gameCanvas;\n    //const ctx = canvas.getContext(\"2d\");\n    //this.drawTank(ctx);\n  },\n  methods: {\n    showFireHelp() {\n      this.fireHelpVisible = true;\n    },\n    hideFireHelp() {\n      this.fireHelpVisible = false;\n    },\n    drawPlayerNames(ctx) {\n      ctx.save();\n\n      //size of rectangles for healthbars\n      const player1X = 10 + 200 / 2;\n      const player2X = 1070 + 200 / 2;\n      ctx.font = \"28px Montserrat\";\n      ctx.fillStyle = \"black\";\n      // ctx.textAlign = \"left\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      ctx.fillText(this.player1.name, player1X, 30);\n      ctx.fillText(\"Player 2\", player2X, 30);\n      ctx.restore();\n    },\n    drawPlayerHealth(ctx) {\n      ctx.save();\n      // const canvas = this.$refs.canvas;\n      // const ctx = canvas.getContext('2d');\n\n      ctx.fillStyle = 'black'; // White color\n      ctx.fillRect(10, 50, 200, 40);\n      ctx.fillRect(1070, 50, 200, 40);\n\n      // Draw red fill\n      ctx.fillStyle = '#FF0000'; // Red color\n      ctx.fillRect(10, 50, 180, 40); // Adjusted for border thickness\n      ctx.fillRect(1070, 50, 180, 40); // Adjusted for border thickness\n\n      //Draw outline\n      ctx.strokeStyle = 'gray';\n      ctx.lineWidth = 5; // Border width\n      ctx.strokeRect(10, 50, 200, 40);\n      ctx.strokeRect(1070, 50, 200, 40);\n      ctx.fillStyle = '#000000'; // Text color\n      ctx.font = '20px Montserrat';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('80/100', 110, 70);\n      ctx.fillText('80/100', 1170, 70);\n      ctx.restore();\n    },\n    startTimer() {\n      setInterval(() => {\n        if (this.time > 0) {\n          this.time--;\n        } else {\n          this.gameOver = true;\n        }\n      }, 1000);\n    },\n    generateTerrain() {\n      // Generate a simple random terrain within 2/3 of the canvas height\n      const maxTerrainHeight = this.canvasHeight * 2 / 3;\n      this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n        const baseHeight = maxTerrainHeight; // Base height is 2/3 of the canvas height\n        const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n        return baseHeight + variation;\n      });\n    },\n    fireMissile() {\n      const startX = this.player1.x + 15;\n      const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n      const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n      const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n      const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n      const endY = this.canvasHeight;\n      this.missile = {\n        t: 0,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      };\n      this.animateMissile();\n    },\n    animateMissile() {\n      if (!this.missile) return;\n      const {\n        t,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      } = this.missile;\n      const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n      const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n      this.missile.t += 0.01;\n      if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n        this.explodeTerrain(x, y);\n        this.missile = null;\n        this.gameOver = true;\n        return;\n      }\n      this.renderGame();\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, 2 * Math.PI);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n      requestAnimationFrame(this.animateMissile);\n    },\n    checkTerrainCollision(x, y) {\n      // Check if the missile hit the terrain\n      return y >= this.terrain[Math.floor(x)];\n    },\n    explodeTerrain(x, y) {\n      // Create a circular explosion in the terrain\n      const explosionRadius = 20;\n      for (let i = -explosionRadius; i <= explosionRadius; i++) {\n        const pos = Math.floor(x) + i;\n        if (pos >= 0 && pos < this.canvasWidth) {\n          const distance = Math.sqrt(i * i);\n          if (distance <= explosionRadius) {\n            const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n            this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n          }\n        }\n      }\n      this.renderGame();\n      this.wind = 0; //Math.floor(Math.random() * 100 - 50); \n    },\n    renderGame() {\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Draw the terrain\n      this.drawTerrain(ctx);\n\n      // Draw player 1's tank\n      this.drawTank(ctx, this.player1);\n\n      //Draw player names\n      this.drawPlayerNames(ctx);\n\n      //Draw player health\n      this.drawPlayerHealth(ctx);\n      this.drawAimCircle(this.player1);\n    },\n    drawTerrain(ctx) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.canvasHeight);\n      for (let x = 0; x < this.terrain.length; x++) {\n        ctx.lineTo(x, this.terrain[x]);\n      }\n      ctx.lineTo(this.canvasWidth, this.canvasHeight);\n      ctx.closePath();\n      ctx.fillStyle = \"saddlebrown\";\n      ctx.fill();\n    },\n    onMouseDown(event) {\n      const rect = this.$refs.gameCanvas.getBoundingClientRect();\n      this.mousePosition.x = event.clientX - rect.left;\n      this.mousePosition.y = event.clientY - rect.top;\n\n      // Check if the click is within the aim circle\n      if (this.isHovering) {\n        this.isDragging = true; // Start dragging\n        this.lineStopX = this.mousePosition.x; // Initialize line stop positions\n        this.lineStopY = this.mousePosition.y;\n      }\n    },\n    onMouseUp() {\n      this.isDragging = false; // Stop dragging\n    },\n    onMouseMove(event) {\n      const rect = this.$refs.gameCanvas.getBoundingClientRect();\n      this.mousePosition.x = event.clientX - rect.left;\n      this.mousePosition.y = event.clientY - rect.top;\n      const dx = this.mousePosition.x - this.player1.x;\n      const dy = this.mousePosition.y - this.player1.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (this.isDragging) {\n        // Cap the power line's length to the circle radius\n        const clampedDistance = Math.min(distance, this.aimCircleRadius);\n        this.power = Math.round(clampedDistance / this.aimCircleRadius * this.maxShotPower);\n\n        // Update the line end positions\n        const angle = Math.atan2(dy, dx);\n        this.lineStopX = this.player1.x + clampedDistance * Math.cos(angle);\n        this.lineStopY = this.player1.y + clampedDistance * Math.sin(angle);\n        this.angle = -(angle * 180) / Math.PI;\n      }\n\n      // const dx = this.mousePosition.x - this.player1.x;\n      // const dy = this.mousePosition.y - this.player1.y;\n      // const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Show the aiming UI if the mouse is within the aiming circle range\n      this.isHovering = distance >= 1 && distance <= this.aimCircleRadius;\n      if (this.isHovering) {\n        //Calculate the angle between the tank and the mouse\n        if (!this.stopLine) {\n          this.angle = Math.atan2(dy, dx) * 180 / Math.PI;\n        }\n        //this.drawAimCircle(this.player1);\n      }\n    },\n    onMouseClick(event) {\n      console.log(\"Clicked insideee the aim circle!\"); // Debug message\n      const rect = this.$refs.gameCanvas.getBoundingClientRect();\n      this.mousePosition.x = event.clientX - rect.left;\n      this.mousePosition.y = event.clientY - rect.top;\n      const dx = this.mousePosition.x - this.player1.x;\n      const dy = this.mousePosition.y - this.player1.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      // Show the aiming UI if the mouse is within the aiming circle range\n      this.isHovering = distance >= 1 && distance <= this.aimCircleRadius;\n      if (this.isHovering) {\n        this.angle = -(Math.atan2(dy, dx) * 180) / Math.PI;\n        this.power = Math.round(distance / this.aimCircleRadius * this.maxShotPower);\n        this.stopLine = true;\n        this.stopLineX = this.mousePosition.x;\n        this.stopLineY = this.mousePosition.y;\n        this.drawAimCircle(this.player1);\n      }\n    },\n    drawTank(ctx, player) {\n      ctx.save();\n      this.player1.y = this.terrain[Math.floor(player.x)] - player.size / 2;\n      ctx.save();\n      ctx.translate(player.x, this.player1.y);\n\n      // Draw the tank body\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n\n      // Draw the tank turret\n      const turretLength = player.size * 0.7;\n      ctx.translate(0, -player.size / 7);\n      ctx.rotate(-this.angle * Math.PI / 180);\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(0, -5, turretLength, 10);\n      ctx.restore();\n    },\n    drawAimCircle(player) {\n      // Get the canvas context\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      //ctx.save();\n\n      const x = player.x;\n      const y = player.y;\n      ctx.beginPath();\n      ctx.arc(x, y, this.aimCircleRadius, 0, 2 * Math.PI);\n      // Fill the circle with a semi-transparent color\n      ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n      ctx.fill(); // Fill first to apply transparency correctly\n\n      // Stroke the border of the circle\n      ctx.strokeStyle = \"black\";\n      ctx.stroke();\n\n      // Draw the power/shot line\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(this.lineStopX, this.lineStopY); // Use the updated stop positions\n      ctx.strokeStyle = \"red\";\n      ctx.stroke();\n\n      //ctx.restore();\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvasWidth","canvasHeight","terrain","player1","x","y","size","angle","power","tankColor","health","mousePosition","isHovering","aimCircleRadius","maxShotPower","minShotPower","minShotDistance","stopLine","lineStopX","lineStopY","isDragging","imgTank","wind","missile","gameOver","fireHelpVisible","time","money","fuel","fuelMax","wins","mounted","startTimer","generateTerrain","renderGame","methods","showFireHelp","hideFireHelp","drawPlayerNames","ctx","save","player1X","player2X","font","fillStyle","textAlign","textBaseline","fillText","restore","drawPlayerHealth","fillRect","strokeStyle","lineWidth","strokeRect","setInterval","maxTerrainHeight","Array","fill","map","_","baseHeight","variation","Math","sin","fireMissile","startX","startY","controlX","cos","PI","controlY","endX","endY","t","animateMissile","checkTerrainCollision","explodeTerrain","canvas","$refs","gameCanvas","getContext","beginPath","arc","requestAnimationFrame","floor","explosionRadius","i","pos","distance","sqrt","impactDepth","max","clearRect","drawTerrain","drawTank","drawAimCircle","moveTo","length","lineTo","closePath","onMouseDown","event","rect","getBoundingClientRect","clientX","left","clientY","top","onMouseUp","onMouseMove","dx","dy","clampedDistance","min","round","atan2","onMouseClick","console","log","stopLineX","stopLineY","player","translate","turretLength","rotate","stroke"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n    <div class=\"game-screen text-center mt-10\">\n      <h1 class=\"text-2xl font-bold mb-4\">Tanks</h1>\n      <label class=\"block\"><span class=\"font-bold\">Wind: <span class=\"text-2xl\">{{ wind }}</span> </span>  (positive for right, negative for left)</label>\n      <div class=\"controls mt-4 flex justify-center items-center gap-4\">\n        <div>\n          <label class=\"block font-bold\">Angle: {{ angle }}°</label>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"90\" \n            v-model=\"angle\" \n            class=\"w-32\"\n          />\n        </div>\n        <div>\n          <label class=\"block font-bold\">Power: {{ power }}</label>\n          <input \n            type=\"range\" \n            min=\"10\" \n            max=\"100\" \n            v-model=\"power\" \n            class=\"w-32\"\n          />\n        </div>\n      </div>\n      <div\n        class=\"h-48 bg-black bg-opacity-80 bg-neutral-900 text-white m-auto items-center justify-center flex flex-rows space-x-6\"\n        style=\"width: 1280px;\">\n        <!-- style=\"background: url('assets/metalbg.png') no-repeat center center; background-size: cover; width: 1280px;\"> -->\n\n        <div class=\"flex flex-col space-y-1\">\n          <div>\n            <button\n              mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"ml-4 w-96 h-16 bg-blue-300 bg-opacity-50 text-black rounded-lg border-4 border-black hover:bg-blue-400 font-bold text-4xl\">\n              WEAPON SELECTOR\n            </button>\n          </div>\n\n          <div>\n            <button\n              mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"ml-4 w-96 h-16 bg-gray-300 bg-opacity-50 rounded-lg border-4 border-black hover:bg-gray-400\">\n              <div class=\"flex flex-row justify-center space-x-4\">\n                <div class=\"text-black font-bold text-3xl\">SMALL MISSILE</div>\n                <div class=\"w-8 h-8\" style=\"background: url('assets/small_missile_icon.png') no-repeat center center; background-size: cover;\"></div>\n                <div class=\"text-black font-bold text-3xl\">20</div>\n              </div>\n               \n            </button>\n          </div>\n      </div>\n        <!-- <img src=\"assets/small_missile_icon.png\" alt=\"Missile Icon\"> -->\n\n        <div class=\"relative\">\n          <button\n              @mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"w-80 py-16 bg-red-300 bg-opacity-50 text-black rounded-lg border-4 border-black hover:bg-red-400 font-bold text-4xl\">\n              FIRE\n            <span v-if=\"fireHelpVisible\" class=\"absolute top-0 left-0 right-0 bottom-0 bg-black bg-opacity-50 flex justify-center items-center text-white text-2xl\">\n              Click to fire!\n            </span>\n          </button>\n        </div>\n\n        <!-- Row flex for money, time and so on -->\n        <div class =\"flex flex-rows space-x-8\">\n\n          <div class =\"flex flex-col space-y-4\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ time }} (s)</h1>\n            </div>\n            <div class = \"w-16 h-16\" style=\"background: url('assets/time_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-2\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ money }}$</h1>\n            </div>\n            <div class = \"w-20 h-20\" style=\"background: url('assets/money_bag_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-2, items-center\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ fuel }}/{{ fuelMax }}</h1>\n            </div>\n            <div class = \"w-20 h-20\" style=\"background: url('assets/fuel_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-3\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ wins }}win</h1>\n            </div>\n            <div class = \"w-16 h-16\" style=\"background: url('assets/trophy_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n        </div>\n\n        <!-- Pause button, absolute position from the bar-->\n        <div class=\"relative mb-16\">\n          <div class=\"w-20 h-20\" style=\"background: url('assets/pause_icon.png') no-repeat center center; background-size: cover;\"></div>\n        </div>\n\n        \n        \n      </div>\n\n    </div>\n      <canvas \n        ref=\"gameCanvas\" \n        :width=\"canvasWidth\" \n        :height=\"canvasHeight\" \n        class=\"border border-gray-700 m-auto\"\n        @mousemove=\"onMouseMove\"\n        @click=\"onMouseClick\"\n        @mouseleave=\"onMouseLeave\"\n        @mouseup=\"onMouseUp\"\n        @mousedown=\"onMouseDown\"\n      ></canvas>\n      <img :src=\"'assets/svgtank1.svg'\" alt=\"Tank\" id=\"tankImage\" style=\"display: none;\"/>\n\n      <div ref=\"svgContainer\" style=\"display: none;\"></div>\n  </template>\n  \n  <script>\n  //import axios from 'axios';\n  export default {\n    name: \"GameScreen\",\n    data() {\n      return {\n        canvasWidth: 1280,\n        canvasHeight: 720,\n        terrain: [],\n        player1: {\n          x: 100,\n          y: 370,\n          size: 40,\n          angle: 45,\n          power: 50,\n          tankColor: \"green\",\n          name: \"DJ Khaled\",\n          health: 100,\n        },\n        mousePosition: {\n          x: 0,\n          y: 0,\n        },\n        isHovering: false,\n        aimCircleRadius: 200,\n        maxShotPower: 100,\n        minShotPower: 1,\n        minShotDistance: 50,\n        stopLine: false,\n        lineStopX: 200,\n        lineStopY: 400,\n        isDragging: false,\n        imgTank: null,\n\n        wind: 0,\n        missile: null,\n        angle: 45,\n        power: 50,\n        gameOver: false,\n        fireHelpVisible: false,\n        time: 10,\n        money: 4000,\n        fuel: 100,\n        fuelMax: 250,\n        wins: 1,\n      };\n    },\n    mounted() {\n      //this.obtainTankSVG();\n      this.wind = 0;//Math.floor(Math.random() * 100 - 50); \n      this.player1.tankColor = \"green\"; //this.$route.query.color;\n      this.startTimer();\n      this.generateTerrain();\n      this.renderGame();\n      //const canvas = this.$refs.gameCanvas;\n      //const ctx = canvas.getContext(\"2d\");\n      //this.drawTank(ctx);\n    },\n    methods: {\n      showFireHelp() {\n        this.fireHelpVisible = true;\n      },\n      hideFireHelp() {\n        this.fireHelpVisible = false;\n      },\n\n      drawPlayerNames(ctx) {\n        ctx.save();\n\n        //size of rectangles for healthbars\n        const player1X = 10 + 200 / 2;\n        const player2X = 1070 + 200 / 2;\n\n        ctx.font = \"28px Montserrat\";\n        ctx.fillStyle = \"black\";\n        // ctx.textAlign = \"left\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(this.player1.name, player1X, 30);\n        ctx.fillText(\"Player 2\", player2X, 30);\n        ctx.restore();\n      },\n\n      drawPlayerHealth(ctx){\n        ctx.save();\n        // const canvas = this.$refs.canvas;\n        // const ctx = canvas.getContext('2d');\n\n        ctx.fillStyle = 'black'; // White color\n        ctx.fillRect(10, 50, 200, 40);\n\n        ctx.fillRect(1070, 50, 200, 40);\n\n        // Draw red fill\n        ctx.fillStyle = '#FF0000'; // Red color\n        ctx.fillRect(10, 50, 180, 40); // Adjusted for border thickness\n        ctx.fillRect(1070, 50, 180, 40); // Adjusted for border thickness\n\n        //Draw outline\n        ctx.strokeStyle = 'gray';\n        ctx.lineWidth = 5; // Border width\n        ctx.strokeRect(10, 50, 200, 40);\n        ctx.strokeRect(1070, 50, 200, 40);\n\n        ctx.fillStyle = '#000000'; // Text color\n        ctx.font = '20px Montserrat';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('80/100', 110, 70);\n        ctx.fillText('80/100', 1170, 70);\n\n        ctx.restore();\n      },\n\n      startTimer() {\n        setInterval(() => {\n          if (this.time > 0) {\n            this.time--;\n          } else {\n            this.gameOver = true;\n          }\n        }, 1000);\n      },\n\n      generateTerrain() {\n        // Generate a simple random terrain within 2/3 of the canvas height\n        const maxTerrainHeight = (this.canvasHeight * 2) / 3;\n        this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n          const baseHeight = maxTerrainHeight; // Base height is 2/3 of the canvas height\n          const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n          return baseHeight + variation;\n        });\n      },\n\n      fireMissile() {\n        const startX = this.player1.x + 15;\n        const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n        const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n        const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n        const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n        const endY = this.canvasHeight;\n  \n        this.missile = {\n          t: 0,\n          startX,\n          startY,\n          controlX,\n          controlY,\n          endX,\n          endY,\n        };\n  \n        this.animateMissile();\n      },\n      animateMissile() {\n        if (!this.missile) return;\n  \n        const { t, startX, startY, controlX, controlY, endX, endY } = this.missile;\n  \n        const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n        const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n  \n        this.missile.t += 0.01;\n        if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n          this.explodeTerrain(x, y);\n          this.missile = null;\n          this.gameOver = true;\n          return;\n        }\n  \n        this.renderGame();\n  \n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n  \n        requestAnimationFrame(this.animateMissile);\n      },\n      checkTerrainCollision(x, y) {\n        // Check if the missile hit the terrain\n        return y >= this.terrain[Math.floor(x)];\n      },\n      explodeTerrain(x, y) {\n        // Create a circular explosion in the terrain\n        const explosionRadius = 20;\n        for (let i = -explosionRadius; i <= explosionRadius; i++) {\n          const pos = Math.floor(x) + i;\n          if (pos >= 0 && pos < this.canvasWidth) {\n            const distance = Math.sqrt(i * i);\n            if (distance <= explosionRadius) {\n              const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n              this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n            }\n          }\n        }\n        this.renderGame();\n        this.wind = 0;//Math.floor(Math.random() * 100 - 50); \n\n      },\n      renderGame() {\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // Draw the terrain\n        this.drawTerrain(ctx);\n  \n        // Draw player 1's tank\n        this.drawTank(ctx, this.player1);\n\n        //Draw player names\n        this.drawPlayerNames(ctx);\n\n        //Draw player health\n        this.drawPlayerHealth(ctx);\n\n        this.drawAimCircle(this.player1);\n\n      },\n      drawTerrain(ctx) {\n        ctx.beginPath();\n        ctx.moveTo(0, this.canvasHeight);\n        for (let x = 0; x < this.terrain.length; x++) {\n          ctx.lineTo(x, this.terrain[x]);\n        }\n        ctx.lineTo(this.canvasWidth, this.canvasHeight);\n        ctx.closePath();\n        ctx.fillStyle = \"saddlebrown\";\n        ctx.fill();\n      },\n\n      onMouseDown(event) {\n        const rect = this.$refs.gameCanvas.getBoundingClientRect();\n        this.mousePosition.x = event.clientX - rect.left;\n        this.mousePosition.y = event.clientY - rect.top;\n\n        // Check if the click is within the aim circle\n        if (this.isHovering) {\n          this.isDragging = true; // Start dragging\n          this.lineStopX = this.mousePosition.x; // Initialize line stop positions\n          this.lineStopY = this.mousePosition.y;\n        }\n      },\n\n      onMouseUp() {\n        this.isDragging = false; // Stop dragging\n      },\n\n      onMouseMove(event) {\n          const rect = this.$refs.gameCanvas.getBoundingClientRect();\n          this.mousePosition.x = event.clientX - rect.left;\n          this.mousePosition.y = event.clientY - rect.top;\n\n          const dx = this.mousePosition.x - this.player1.x;\n          const dy = this.mousePosition.y - this.player1.y;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (this.isDragging) {\n            // Cap the power line's length to the circle radius\n            const clampedDistance = Math.min(distance, this.aimCircleRadius);\n            this.power = Math.round((clampedDistance / this.aimCircleRadius) * this.maxShotPower);\n            \n            // Update the line end positions\n            const angle = Math.atan2(dy, dx);\n            this.lineStopX = this.player1.x + clampedDistance * Math.cos(angle);\n            this.lineStopY = this.player1.y + clampedDistance * Math.sin(angle);\n            this.angle = -(angle * 180) / Math.PI;\n          }\n\n          // const dx = this.mousePosition.x - this.player1.x;\n          // const dy = this.mousePosition.y - this.player1.y;\n          // const distance = Math.sqrt(dx * dx + dy * dy);\n\n          // Show the aiming UI if the mouse is within the aiming circle range\n          this.isHovering = distance >= 1 && distance <= this.aimCircleRadius;\n\n          if (this.isHovering) {\n            //Calculate the angle between the tank and the mouse\n            if(!this.stopLine){\n              this.angle = (Math.atan2(dy, dx) * 180) / Math.PI;\n            }\n            //this.drawAimCircle(this.player1);\n          }\n      },\n\n      onMouseClick(event) {\n        console.log(\"Clicked insideee the aim circle!\"); // Debug message\n        const rect = this.$refs.gameCanvas.getBoundingClientRect();\n        this.mousePosition.x = event.clientX - rect.left;\n        this.mousePosition.y = event.clientY - rect.top;\n\n        const dx = this.mousePosition.x - this.player1.x;\n        const dy = this.mousePosition.y - this.player1.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Show the aiming UI if the mouse is within the aiming circle range\n        this.isHovering = distance >= 1 && distance <= this.aimCircleRadius;\n\n        if (this.isHovering) {\n          this.angle = -(Math.atan2(dy, dx) * 180) / Math.PI;\n          this.power = Math.round((distance / this.aimCircleRadius) * this.maxShotPower);\n          this.stopLine = true;\n          this.stopLineX = this.mousePosition.x;\n          this.stopLineY = this.mousePosition.y;\n          this.drawAimCircle(this.player1);\n        }\n      },\n      \n      \n      drawTank(ctx, player) {\n        ctx.save();\n\n        this.player1.y = this.terrain[Math.floor(player.x)] - player.size / 2;\n        ctx.save();\n        ctx.translate(player.x, this.player1.y);\n  \n        // Draw the tank body\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n  \n        // Draw the tank turret\n        const turretLength = player.size * 0.7;\n        ctx.translate(0, -player.size / 7);\n        ctx.rotate((-this.angle * Math.PI) / 180);\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(0, -5, turretLength, 10);\n    \n        ctx.restore();\n      },\n\n      drawAimCircle(player){\n\n        // Get the canvas context\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        //ctx.save();\n\n        const x = player.x;\n        const y = player.y;\n\n        ctx.beginPath();\n        ctx.arc(x, y, this.aimCircleRadius, 0, 2 * Math.PI);\n        // Fill the circle with a semi-transparent color\n        ctx.fillStyle = 'rgba(128, 128, 128, 0.5)';\n        ctx.fill();  // Fill first to apply transparency correctly\n\n        // Stroke the border of the circle\n        ctx.strokeStyle = \"black\";\n        ctx.stroke();\n\n        // Draw the power/shot line\n        ctx.beginPath();\n        ctx.moveTo(x, y);\n        ctx.lineTo(this.lineStopX, this.lineStopY); // Use the updated stop positions\n        ctx.strokeStyle = \"red\";\n        ctx.stroke();\n\n        //ctx.restore();\n\n      },\n    },\n  };\n  </script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');\n\ncanvas {\n  font-family: 'Montserrat', sans-serif;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}