{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"game-screen\"\n  }, null, -1 /* HOISTED */)), _cache[1] || (_cache[1] = _createElementVNode(\"div\", {\n    class: \"game-map\"\n  }, null, -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pixelMap, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (pixel, pixelIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: pixelIndex,\n        class: \"pixel\",\n        style: _normalizeStyle({\n          backgroundColor: pixel.color\n        })\n      }, null, 4 /* STYLE */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","class","_renderList","$data","pixelMap","row","rowIndex","key","pixel","pixelIndex","style","_normalizeStyle","backgroundColor","color"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n\n    <div class=\"game-screen\">\n\n      </div>\n\n    <div class =\"game-map\"></div>\n    <div v-for=\"(row, rowIndex) in pixelMap\" :key=\"rowIndex\" class=\"row\">\n      <div \n        v-for=\"(pixel, pixelIndex) in row\" \n        :key=\"pixelIndex\" \n        class=\"pixel\" \n        :style=\"{ backgroundColor: pixel.color }\">\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'GameScreen',\n    data() {\n      return {\n        pixelMap: this.createPixelMap(100, 50), // 100x50 pixel map\n      };\n    },\n    methods: {\n        createPixelMap(width, height) {\n        const map = [];\n        for (let y = 0; y < height; y++) {\n            const row = [];\n            for (let x = 0; x < width; x++) {\n            // Create a pixel object with color, maybe based on position or height\n            let color = y > 30 ? '#008000' : '#87CEEB'; // Example: green for ground, blue for sky\n            row.push({ color });\n            }\n            map.push(row);\n        }\n        return map;\n        }\n    }\n  };\n  </script>\n  \n  <style scoped>\n\n  .row {\n  display: flex;\n  }\n\n  .pixel {\n  width: 10px;\n  height: 10px;\n  }\n</style>"],"mappings":";;uBAAAA,mBAAA,CAAAC,SAAA,S,0BAEIC,mBAAA,CAEQ;IAFHC,KAAK,EAAC;EAAa,6B,0BAIxBD,mBAAA,CAA6B;IAAxBC,KAAK,EAAE;EAAU,8B,kBACtBH,mBAAA,CAOMC,SAAA,QAdVG,WAAA,CAOmCC,KAAA,CAAAC,QAAQ,EAP3C,CAOiBC,GAAG,EAAEC,QAAQ;yBAA1BR,mBAAA,CAOM;MAPoCS,GAAG,EAAED,QAAQ;MAAEL,KAAK,EAAC;2BAC7DH,mBAAA,CAKMC,SAAA,QAbZG,WAAA,CASsCG,GAAG,EATzC,CASgBG,KAAK,EAAEC,UAAU;2BAD3BX,mBAAA,CAKM;QAHHS,GAAG,EAAEE,UAAU;QAChBR,KAAK,EAAC,OAAO;QACZS,KAAK,EAZdC,eAAA;UAAAC,eAAA,EAYmCJ,KAAK,CAACK;QAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}