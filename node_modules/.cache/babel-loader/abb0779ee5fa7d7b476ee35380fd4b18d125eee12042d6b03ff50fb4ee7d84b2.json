{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex\"\n};\nconst _hoisted_2 = [\"onClick\", \"onMouseenter\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(5, n => {\n    return _createElementVNode(\"div\", {\n      key: n,\n      onClick: $event => $options.setSkillLevel(n),\n      onMouseenter: $event => $options.hoverSkillLevel(n),\n      onMouseleave: _cache[0] || (_cache[0] = $event => $options.hoverSkillLevel(0)),\n      class: _normalizeClass([\"w-12 h-12 rounded-2xl border-4 bg-gray-300 border-gray-400\", [{\n        'bg-yellow-300 border-yellow-400': n <= $props.currentLevel,\n        'bg-yellow-100 border-yellow-200': n <= $data.hoverLevel\n      }]])\n    }, null, 42 /* CLASS, PROPS, NEED_HYDRATION */, _hoisted_2);\n  }), 64 /* STABLE_FRAGMENT */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_Fragment","_renderList","n","_createElementVNode","key","onClick","$event","$options","setSkillLevel","onMouseenter","hoverSkillLevel","onMouseleave","_cache","_normalizeClass","$props","currentLevel","$data","hoverLevel","_hoisted_2"],"sources":["/home/antiphy/ITU/ITU_project/src/components/Selectors/SkillSelector.vue"],"sourcesContent":["<template>\n  <div class=\"flex\">\n    <div\n      v-for=\"n in 5\"\n      :key=\"n\"\n      @click=\"setSkillLevel(n)\"\n      @mouseenter=\"hoverSkillLevel(n)\"\n      @mouseleave=\"hoverSkillLevel(0)\"\n      class=\"w-12 h-12 rounded-2xl border-4 bg-gray-300 border-gray-400\"\n      :class=\"[\n        {'bg-yellow-300 border-yellow-400': n <= currentLevel,\n        'bg-yellow-100 border-yellow-200': n <= hoverLevel }]\"\n    ></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    currentLevel: {\n      type: Number,\n      required: true\n    },\n    freePoints: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      hoverLevel: 0\n    };\n  },\n  methods: {\n    setSkillLevel(level) {\n      var setLevel = level;\n      // clear the level when setting the same level\n      if (setLevel === this.currentLevel) {\n        setLevel = 0;\n      }\n      // set the level to the maximum possible if wanted even more\n      if (setLevel > this.hoverLevel) {\n        setLevel = this.hoverLevel;\n      }\n      const pointsToAdd = setLevel - this.currentLevel;\n\n      // check if there are enough free points\n      if (this.freePoints - pointsToAdd >= 0) {\n        this.$emit('update-skill', setLevel);\n        this.$emit('update-free-points', this.freePoints - pointsToAdd);\n      }\n      // clear the hover level to see clicked level\n      this.hoverLevel = 0;\n    },\n    hoverSkillLevel(level) {\n      // show the level that would be set (based on the free skill point)\n      const maxLevel = this.currentLevel + this.freePoints;\n      this.hoverLevel = (level > maxLevel) ? maxLevel : level;\n    }\n  }\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;mBADnB;;uBACEC,mBAAA,CAYM,OAZNC,UAYM,I,cAXJD,mBAAA,CAUOE,SAAA,QAZXC,WAAA,CAGkB,CAAC,EAANC,CAAC;WADVC,mBAAA,CAUO;MARJC,GAAG,EAAEF,CAAC;MACNG,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,aAAa,CAACN,CAAC;MACtBO,YAAU,EAAAH,MAAA,IAAEC,QAAA,CAAAG,eAAe,CAACR,CAAC;MAC7BS,YAAU,EAAAC,MAAA,QAAAA,MAAA,MAAAN,MAAA,IAAEC,QAAA,CAAAG,eAAe;MAC5Bb,KAAK,EARXgB,eAAA,EAQY,4DAA4D,G;2CACZX,CAAC,IAAIY,MAAA,CAAAC,YAAY;2CAA6Cb,CAAC,IAAIc,KAAA,CAAAC;MAAU;oDATzIC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}