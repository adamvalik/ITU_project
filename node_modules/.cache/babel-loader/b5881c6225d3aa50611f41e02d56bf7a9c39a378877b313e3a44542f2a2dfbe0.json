{"ast":null,"code":"export default {\n  props: {\n    isFlipped: {\n      type: Boolean,\n      default: false\n    },\n    defaultColor: {\n      type: String,\n      default: '#06B559'\n    }\n  },\n  data() {\n    return {\n      currentTankIndex: 0,\n      // Track the current tank type (0-4)\n      tanks: [\"/assets/tank1.svg\",\n      // Path to the first tank SVG\n      \"/assets/tank2.svg\",\n      // Path to the second tank SVG\n      \"/assets/tank3.svg\",\n      // Path to the third tank SVG\n      \"/assets/tank4.svg\",\n      // Path to the fourth tank SVG\n      \"/assets/tank5.svg\" // Path to the fifth tank SVG\n      ],\n      targetColor: this.defaultColor,\n      // Color to change (initially set to red)\n      specificColorToChange: this.defaultColor,\n      // The specific color in the SVG that you want to change\n      colorOptions: [{\n        name: \"Green\",\n        hex: \"#06B559\"\n      }, {\n        name: \"Red\",\n        hex: \"#BF1313\"\n      }, {\n        name: \"Blue\",\n        hex: \"#0D6BBD\"\n      }],\n      customColor: null // Custom color picker value\n    };\n  },\n  watch: {\n    // Watch for changes in the custom color picker\n    customColor(newColor) {\n      this.changeColor(newColor); // Apply the color change when the custom color changes\n    }\n  },\n  computed: {\n    gradientStyle() {\n      return this.customColor ? {\n        backgroundColor: this.customColor\n      } // Use selected color\n      : {\n        background: `linear-gradient(217deg, rgb(255,0,0), rgb(255,0,0,0) 70%),\n                         linear-gradient(127deg, rgb(0,255,0), rgb(0,255,0,0) 70%),\n                         linear-gradient(336deg, rgb(0,0,255), rgb(0,0,255,0) 70%)`\n      };\n    }\n  },\n  methods: {\n    // Swap between tanks\n    swapTank(direction) {\n      if (direction === \"left\") {\n        this.currentTankIndex = this.currentTankIndex === 0 ? this.tanks.length - 1 : this.currentTankIndex - 1;\n      } else if (direction === \"right\") {\n        this.currentTankIndex = this.currentTankIndex === this.tanks.length - 1 ? 0 : this.currentTankIndex + 1;\n      }\n      this.emitSelectedTank(); // Emit the selected tank\n\n      // After swapping the tank, reload the SVG and apply the current color\n      this.loadTank();\n    },\n    // Emit the selected tank\n    emitSelectedTank() {\n      const selectedTank = this.tanks[this.currentTankIndex];\n      this.$emit('tank-selected', selectedTank); // Emit event to parent\n    },\n    // Change the color of the specific part of the SVG\n    changeColor(newColor) {\n      this.specificColorToChange = this.targetColor; // Update the specific color to be changed\n      this.targetColor = newColor; // Update the color to be applied\n      this.applyColorChange();\n    },\n    // Emit the selected color\n    emitSelectedColor() {\n      if (this.customColor) {\n        this.$emit('color-selected', this.customColor); // Emit event to parent\n      } else {\n        this.$emit('color-selected', this.targetColor); // Emit event to parent\n      }\n    },\n    // Load the current tank SVG file\n    async loadTank() {\n      this.specificColorToChange = '#06B559';\n      const response = await fetch(this.tanks[this.currentTankIndex]);\n      const svgText = await response.text();\n      this.$refs.svgContainer.innerHTML = svgText; // Insert the SVG into the container\n      this.applyColorChange(); // Apply the selected color\n    },\n    // Apply the color change to elements that initially have the specific color\n    applyColorChange() {\n      const elements = this.$refs.svgContainer.querySelectorAll(`[fill=\"${this.specificColorToChange}\"]`);\n      elements.forEach(element => {\n        element.setAttribute(\"fill\", this.targetColor); // Change the color only if it matches the specific color\n      });\n    }\n  },\n  mounted() {\n    this.loadTank(); // Load the first tank when the component is mounted\n    this.emitSelectedTank();\n    this.emitSelectedColor();\n  }\n};","map":{"version":3,"names":["props","isFlipped","type","Boolean","default","defaultColor","String","data","currentTankIndex","tanks","targetColor","specificColorToChange","colorOptions","name","hex","customColor","watch","newColor","changeColor","computed","gradientStyle","backgroundColor","background","methods","swapTank","direction","length","emitSelectedTank","loadTank","selectedTank","$emit","applyColorChange","emitSelectedColor","response","fetch","svgText","text","$refs","svgContainer","innerHTML","elements","querySelectorAll","forEach","element","setAttribute","mounted"],"sources":["/home/antiphy/ITU/ITU_project/src/components/TankSelector.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col items-center bg-gray-100\">\n    <div class=\"flex gap-4 items-center justify-between\">\n      <button @click=\"swapTank('left')\" class=\"h-10 w-10 bg-red-500 rounded-xl hover:border-2 border-gray-100 transition-all\"></button>\n\n      <div ref=\"svgContainer\" class=\"tank-container w-64 h-64 mb-4 shadow-xl\" :class=\"{ 'flip-x': isFlipped }\"></div>\n\n      <button @click=\"swapTank('right')\" class=\"h-10 w-10 bg-red-500 rounded-xl hover:border-2 border-gray-100 transition-all\"></button>\n    </div>\n    \n    <!-- Color Change Buttons -->\n    <div class=\"flex gap-4\">\n    <!-- Color Buttons -->\n    <button\n      v-for=\"(color, index) in colorOptions\"\n      :key=\"index\"\n      :style=\"{ backgroundColor: color.hex }\"\n      @click=\"changeColor(color.hex)\"\n      class=\"w-14 h-14 rounded-3xl hover:border-2 border-gray-100 transition-all\"\n    ></button>\n\n    <!-- Custom Color Input -->\n    <label class=\"relative w-14 h-14 rounded-3xl cursor-pointer hover:border-2 border-gray-100 transition-all\">\n      <input v-model=\"customColor\" type=\"color\" class=\"absolute opacity-0 \">\n      <div \n        class=\"absolute inset-0 rounded-3xl flex items-center justify-center text-l font-bold\"\n        :style=\"gradientStyle\"\n      >\n        <span class=\"text-white\">+</span>\n      </div>\n    </label>\n  </div>\n  </div>\n</template>\n  \n  <script>\n  export default {\n    props: {\n      isFlipped: {\n        type: Boolean,\n        default: false,\n      }, \n      defaultColor: {\n        type: String,\n        default: '#06B559',\n      }\n    },\n    data() {\n      return {\n        currentTankIndex: 0, // Track the current tank type (0-4)\n        tanks: [\n          \"/assets/tank1.svg\", // Path to the first tank SVG\n          \"/assets/tank2.svg\", // Path to the second tank SVG\n          \"/assets/tank3.svg\", // Path to the third tank SVG\n          \"/assets/tank4.svg\", // Path to the fourth tank SVG\n          \"/assets/tank5.svg\", // Path to the fifth tank SVG\n        ],\n        targetColor: this.defaultColor, // Color to change (initially set to red)\n        specificColorToChange: this.defaultColor, // The specific color in the SVG that you want to change\n        colorOptions: [\n        { name: \"Green\", hex: \"#06B559\" },\n          { name: \"Red\", hex: \"#BF1313\" },\n          { name: \"Blue\", hex: \"#0D6BBD\" },\n        ],\n        customColor: null, // Custom color picker value\n      };\n    },\n    watch: {\n      // Watch for changes in the custom color picker\n      customColor(newColor) {\n        this.changeColor(newColor); // Apply the color change when the custom color changes\n      }\n    },\n    computed: {\n    gradientStyle() {\n      return this.customColor\n        ? { backgroundColor: this.customColor } // Use selected color\n        : { background: `linear-gradient(217deg, rgb(255,0,0), rgb(255,0,0,0) 70%),\n                         linear-gradient(127deg, rgb(0,255,0), rgb(0,255,0,0) 70%),\n                         linear-gradient(336deg, rgb(0,0,255), rgb(0,0,255,0) 70%)` }; \n    }\n  },\n    methods: {\n      // Swap between tanks\n      swapTank(direction) {\n        if (direction === \"left\") {\n          this.currentTankIndex =\n            this.currentTankIndex === 0\n              ? this.tanks.length - 1\n              : this.currentTankIndex - 1;\n        } else if (direction === \"right\") {\n          this.currentTankIndex =\n            this.currentTankIndex === this.tanks.length - 1\n              ? 0\n              : this.currentTankIndex + 1;\n        }\n\n        this.emitSelectedTank(); // Emit the selected tank\n\n        // After swapping the tank, reload the SVG and apply the current color\n        this.loadTank();\n      },\n\n        // Emit the selected tank\n      emitSelectedTank() {\n        const selectedTank = this.tanks[this.currentTankIndex];\n        this.$emit('tank-selected', selectedTank); // Emit event to parent\n      },\n  \n      // Change the color of the specific part of the SVG\n      changeColor(newColor) {\n        this.specificColorToChange = this.targetColor; // Update the specific color to be changed\n        this.targetColor = newColor; // Update the color to be applied\n        this.applyColorChange();\n      },\n\n      // Emit the selected color\n      emitSelectedColor() {\n        if (this.customColor) {\n          this.$emit('color-selected', this.customColor); // Emit event to parent\n        } else {\n          this.$emit('color-selected', this.targetColor); // Emit event to parent\n        }\n      },\n  \n      // Load the current tank SVG file\n      async loadTank() {\n        this.specificColorToChange = '#06B559'\n        const response = await fetch(this.tanks[this.currentTankIndex]);\n        const svgText = await response.text();\n        this.$refs.svgContainer.innerHTML = svgText; // Insert the SVG into the container\n        this.applyColorChange(); // Apply the selected color\n      },\n  \n      // Apply the color change to elements that initially have the specific color\n      applyColorChange() {\n        const elements = this.$refs.svgContainer.querySelectorAll(`[fill=\"${this.specificColorToChange}\"]`);\n        elements.forEach((element) => {\n          element.setAttribute(\"fill\", this.targetColor); // Change the color only if it matches the specific color\n        });\n      },\n    },\n    mounted() {\n      this.loadTank(); // Load the first tank when the component is mounted\n      this.emitSelectedTank(); \n      this.emitSelectedColor();\n    },\n  };\n  </script>\n  \n  <style scoped>\n  .tank-container {\n    background-color: white;\n    overflow: hidden;\n  }\n\n  .flip-x {\n    transform: scaleX(-1);\n  }\n\n/* Style for the custom color input */\ninput[type=\"color\"] {\n  -webkit-appearance: none;\n  appearance: none;\n  border: none;\n  cursor: pointer;\n}\n\ninput[type=\"color\"]::-webkit-color-swatch-wrapper {\n  padding: 0;\n}\n\ninput[type=\"color\"]::-webkit-color-swatch {\n  border: none;\n}\n</style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}