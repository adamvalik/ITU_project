{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"game-screen\"\n};\nconst _hoisted_2 = {\n  class: \"game-map\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.pixelMap, (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"row\"\n    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (pixel, pixelIndex) => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: pixelIndex,\n        class: \"pixel\",\n        style: _normalizeStyle({\n          backgroundColor: pixel.color\n        })\n      }, null, 4 /* STYLE */);\n    }), 128 /* KEYED_FRAGMENT */))]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","pixelMap","row","rowIndex","key","pixel","pixelIndex","style","_normalizeStyle","backgroundColor","color"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n\n    <div class=\"game-screen\">\n        <div class =\"game-map\">\n            <div v-for=\"(row, rowIndex) in pixelMap\" :key=\"rowIndex\" class=\"row\">\n                <div \n                    v-for=\"(pixel, pixelIndex) in row\" \n                    :key=\"pixelIndex\" \n                    class=\"pixel\" \n                    :style=\"{ backgroundColor: pixel.color }\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n\n  </template>\n  \n  <script>\n  export default {\n    name: 'GameScreen',\n    data() {\n      return {\n        pixelMap: this.createPixelMap(100, 50), // 100x50 pixel map\n      };\n    },\n    methods: {\n        createPixelMap(width, height) {\n        const map = [];\n        for (let y = 0; y < height; y++) {\n            const row = [];\n            for (let x = 0; x < width; x++) {\n            // Create a pixel object with color, maybe based on position or height\n            let color = y > 30 ? '#008000' : '#87CEEB'; // Example: green for ground, blue for sky\n            row.push({ color });\n            }\n            map.push(row);\n        }\n        return map;\n        }\n    }\n  };\n  </script>\n  \n  <style scoped>\n\n    .game-screen {\n    width: 1920; /* Fixed width */\n    height: 1600px; /* Fixed height */\n    background-color: lightblue; /* Light blue background */\n    display: flex;\n    justify-content: center; /* Center the map horizontally */\n    align-items: center; /* Center the map vertically */\n    position: relative; /* Positioning for map overlay */\n    }\n\n    .row {\n    display: flex;\n    }\n\n    .pixel {\n    width: 10px;\n    height: 10px;\n    }\n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAAa;;EACfA,KAAK,EAAE;AAAU;;uBAD1BC,mBAAA,CAWM,OAXNC,UAWM,GAVFC,mBAAA,CASM,OATNC,UASM,I,kBARFH,mBAAA,CAOMI,SAAA,QAXlBC,WAAA,CAI2CC,KAAA,CAAAC,QAAQ,EAJnD,CAIyBC,GAAG,EAAEC,QAAQ;yBAA1BT,mBAAA,CAOM;MAPoCU,GAAG,EAAED,QAAQ;MAAEV,KAAK,EAAC;2BAC3DC,mBAAA,CAKMI,SAAA,QAVtBC,WAAA,CAMkDG,GAAG,EANrD,CAM4BG,KAAK,EAAEC,UAAU;2BAD7BZ,mBAAA,CAKM;QAHDU,GAAG,EAAEE,UAAU;QAChBb,KAAK,EAAC,OAAO;QACZc,KAAK,EAT1BC,eAAA;UAAAC,eAAA,EAS+CJ,KAAK,CAACK;QAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}