{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"flex justify-center items-center min-h-screen bg-grey-300\"\n};\nconst _hoisted_2 = {\n  style: {\n    \"margin-top\": \"180px\"\n  }\n};\nconst _hoisted_3 = [\"width\", \"height\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"canvas\", {\n    id: \"gameCanvas\",\n    width: $data.canvasWidth,\n    height: $data.canvasHeight,\n    class: \"flex justify-end\"\n  }, null, 8 /* PROPS */, _hoisted_3)])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","id","width","$data","canvasWidth","height","canvasHeight","_hoisted_3"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n\n    <div class=\"flex justify-center items-center min-h-screen bg-grey-300\">\n        <div style=\"margin-top: 180px;\">\n            <canvas id=\"gameCanvas\" :width=\"canvasWidth\" :height=\"canvasHeight\" class=\"flex justify-end\"></canvas>\n        </div>\n    </div>\n\n\n  </template>\n  \n  <script>\n  export default {\n    name: 'GameScreen',\n    data() {\n      return {\n        canvasWidth: 1920,  // Width of the canvas\n        canvasHeight: 900, // Height of the canvas\n        map: [], // 2D Array for the terrain\n      };\n    },\n    mounted() {\n        this.initializeMap();\n        this.drawMap();\n    },\n    methods: {\n        // Initialize the map with ground and sky\n        initializeMap() {\n            const groundLevel = 500; // Set ground level in pixels\n            \n            // Create a 2D array (matrix) representing the map\n            this.map = Array(this.canvasHeight).fill().map((_, y) => \n                Array(this.canvasWidth).fill().map(() => (y >= groundLevel ? 1 : 0))\n            );\n        },\n\n\n    // Draw the map using canvas\n        drawMap() {\n            const canvas = document.getElementById('gameCanvas');\n            const ctx = canvas.getContext('2d');\n            \n            // Loop through the map array and draw each pixel\n            for (let y = 0; y < this.map.length; y++) {\n                for (let x = 0; x < this.map[y].length; x++) {\n                    ctx.fillStyle = this.map[y][x] === 1 ? 'green': 'skyblue'; // Set color based on terrain\n                    ctx.fillRect(x, y, 1, 1); // Draw each pixel/block\n                }\n            }\n        },\n    }\n  };\n  </script>\n  \n  <style scoped>\n\n    .row {\n    display: flex;\n    }\n\n    .pixel {\n    width: 10px;\n    height: 10px;\n    }\n</style>"],"mappings":";;EAESA,KAAK,EAAC;AAA2D;;EAC7DC,KAA0B,EAA1B;IAAA;EAAA;AAA0B;mBAHvC;;uBAEIC,mBAAA,CAIM,OAJNC,UAIM,GAHFC,mBAAA,CAEM,OAFNC,UAEM,GADFD,mBAAA,CAAsG;IAA9FE,EAAE,EAAC,YAAY;IAAEC,KAAK,EAAEC,KAAA,CAAAC,WAAW;IAAGC,MAAM,EAAEF,KAAA,CAAAG,YAAY;IAAEX,KAAK,EAAC;0BAJtFY,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}