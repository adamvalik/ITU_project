{"ast":null,"code":"export default {\n  name: \"GameScreen\",\n  data() {\n    return {\n      canvasWidth: 1280,\n      canvasHeight: 720,\n      terrain: [],\n      player1: {\n        x: 100,\n        y: 370,\n        size: 40,\n        angle: 45,\n        power: 50,\n        tankColor: \"green\",\n        name: \"DJ Khaled\",\n        health: 100\n      },\n      wind: 0,\n      missile: null,\n      angle: 45,\n      power: 50,\n      gameOver: false,\n      fireHelpVisible: false,\n      time: 10,\n      money: 4000,\n      fuel: 100,\n      fuelMax: 250,\n      wins: 1\n    };\n  },\n  mounted() {\n    this.wind = 0; //Math.floor(Math.random() * 100 - 50); \n    this.player1.tankColor = \"green\"; //this.$route.query.color;\n    this.startTimer();\n    this.generateTerrain();\n    this.renderGame();\n  },\n  methods: {\n    showFireHelp() {\n      this.fireHelpVisible = true;\n    },\n    hideFireHelp() {\n      this.fireHelpVisible = false;\n    },\n    drawPlayerNames() {\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.font = \"40px Montserrat\";\n      ctx.fillStyle = \"black\";\n      ctx.textAlign = \"left\";\n      ctx.fillText(this.player1.name, 10, 60);\n      ctx.textAlign = \"right\";\n      ctx.fillText(\"Player 2\", this.canvasWidth - 10, 60);\n    },\n    drawPlayerHealth() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext('2d');\n\n      // Draw metallic border\n      ctx.fillStyle = '#C0C0C0'; // Metallic color\n      ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Draw red fill\n      ctx.fillStyle = '#FF0000'; // Red color\n      ctx.fillRect(10, 10, 320, 80); // Adjusted for border thickness\n\n      // Draw black remaining progress\n      ctx.fillStyle = '#000000'; // Black color\n      ctx.fillRect(330, 10, 60, 80); // Adjusted for border thickness\n\n      // Draw text\n      ctx.fillStyle = '#000000'; // Text color\n      ctx.font = '40px Arial';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText('80/100', this.canvasWidth / 2, this.canvasHeight / 2);\n    },\n    startTimer() {\n      setInterval(() => {\n        if (this.time > 0) {\n          this.time--;\n        } else {\n          this.gameOver = true;\n        }\n      }, 1000);\n    },\n    generateTerrain() {\n      // Generate a simple random terrain within 2/3 of the canvas height\n      const maxTerrainHeight = this.canvasHeight * 2 / 3;\n      this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n        const baseHeight = maxTerrainHeight; // Base height is 2/3 of the canvas height\n        const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n        return baseHeight + variation;\n      });\n    },\n    fireMissile() {\n      const startX = this.player1.x + 15;\n      const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n      const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n      const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n      const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n      const endY = this.canvasHeight;\n      this.missile = {\n        t: 0,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      };\n      this.animateMissile();\n    },\n    animateMissile() {\n      if (!this.missile) return;\n      const {\n        t,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      } = this.missile;\n      const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n      const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n      this.missile.t += 0.01;\n      if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n        this.explodeTerrain(x, y);\n        this.missile = null;\n        this.gameOver = true;\n        return;\n      }\n      this.renderGame();\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, 2 * Math.PI);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n      requestAnimationFrame(this.animateMissile);\n    },\n    checkTerrainCollision(x, y) {\n      // Check if the missile hit the terrain\n      return y >= this.terrain[Math.floor(x)];\n    },\n    explodeTerrain(x, y) {\n      // Create a circular explosion in the terrain\n      const explosionRadius = 20;\n      for (let i = -explosionRadius; i <= explosionRadius; i++) {\n        const pos = Math.floor(x) + i;\n        if (pos >= 0 && pos < this.canvasWidth) {\n          const distance = Math.sqrt(i * i);\n          if (distance <= explosionRadius) {\n            const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n            this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n          }\n        }\n      }\n      this.renderGame();\n      this.wind = 0; //Math.floor(Math.random() * 100 - 50); \n    },\n    renderGame() {\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      //Draw player names\n      this.drawPlayerNames();\n\n      //Draw player health\n      this.drawPlayerHealth();\n\n      // Draw the terrain\n      this.drawTerrain(ctx);\n\n      // Draw player 1's tank\n      this.drawTank(ctx, this.player1);\n    },\n    drawTerrain(ctx) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.canvasHeight);\n      for (let x = 0; x < this.terrain.length; x++) {\n        ctx.lineTo(x, this.terrain[x]);\n      }\n      ctx.lineTo(this.canvasWidth, this.canvasHeight);\n      ctx.closePath();\n      ctx.fillStyle = \"saddlebrown\";\n      ctx.fill();\n    },\n    drawTank(ctx, player) {\n      ctx.save();\n      ctx.translate(player.x, this.terrain[Math.floor(player.x)] - player.size / 2);\n\n      // Draw the tank body\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n\n      // Draw the tank turret\n      const turretLength = player.size * 0.7;\n      ctx.translate(0, -player.size / 7);\n      ctx.rotate(-this.angle * Math.PI / 180);\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(0, -5, turretLength, 10);\n      ctx.restore();\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvasWidth","canvasHeight","terrain","player1","x","y","size","angle","power","tankColor","health","wind","missile","gameOver","fireHelpVisible","time","money","fuel","fuelMax","wins","mounted","startTimer","generateTerrain","renderGame","methods","showFireHelp","hideFireHelp","drawPlayerNames","canvas","$refs","gameCanvas","ctx","getContext","font","fillStyle","textAlign","fillText","drawPlayerHealth","fillRect","textBaseline","setInterval","maxTerrainHeight","Array","fill","map","_","baseHeight","variation","Math","sin","fireMissile","startX","startY","controlX","cos","PI","controlY","endX","endY","t","animateMissile","checkTerrainCollision","explodeTerrain","beginPath","arc","requestAnimationFrame","floor","explosionRadius","i","pos","distance","sqrt","impactDepth","max","clearRect","drawTerrain","drawTank","moveTo","length","lineTo","closePath","player","save","translate","turretLength","rotate","restore"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n    <div class=\"game-screen text-center mt-10\">\n      <h1 class=\"text-2xl font-bold mb-4\">Tanks</h1>\n      <label class=\"block\"><span class=\"font-bold\">Wind: <span class=\"text-2xl\">{{ wind }}</span> </span>  (positive for right, negative for left)</label>\n      <div class=\"controls mt-4 flex justify-center items-center gap-4\">\n        <div>\n          <label class=\"block font-bold\">Angle: {{ angle }}Â°</label>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"90\" \n            v-model=\"angle\" \n            class=\"w-32\"\n          />\n        </div>\n        <div>\n          <label class=\"block font-bold\">Power: {{ power }}</label>\n          <input \n            type=\"range\" \n            min=\"10\" \n            max=\"100\" \n            v-model=\"power\" \n            class=\"w-32\"\n          />\n        </div>\n      </div>\n      <div\n        class=\"h-48 bg-black bg-opacity-80 bg-neutral-900 text-white m-auto items-center justify-center flex flex-rows space-x-6\"\n        style=\"width: 1280px;\">\n        <!-- style=\"background: url('assets/metalbg.png') no-repeat center center; background-size: cover; width: 1280px;\"> -->\n\n        <div class=\"flex flex-col space-y-1\">\n          <div>\n            <button\n              mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"ml-4 w-96 h-16 bg-blue-300 bg-opacity-50 text-black rounded-lg border-4 border-black hover:bg-blue-400 font-bold text-4xl\">\n              WEAPON SELECTOR\n            </button>\n          </div>\n\n          <div>\n            <button\n              mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"ml-4 w-96 h-16 bg-gray-300 bg-opacity-50 rounded-lg border-4 border-black hover:bg-gray-400\">\n              <div class=\"flex flex-row justify-center space-x-4\">\n                <div class=\"text-black font-bold text-3xl\">SMALL MISSILE</div>\n                <div class=\"w-8 h-8\" style=\"background: url('assets/small_missile_icon.png') no-repeat center center; background-size: cover;\"></div>\n                <div class=\"text-black font-bold text-3xl\">20</div>\n              </div>\n               \n            </button>\n          </div>\n      </div>\n        <!-- <img src=\"assets/small_missile_icon.png\" alt=\"Missile Icon\"> -->\n\n        <div class=\"relative\">\n          <button\n              @mouseover=\"showFireHelp\"\n              @mouseleave=\"hideFireHelp\"\n              @click=\"fireMissile\"\n              class=\"w-80 py-16 bg-red-300 bg-opacity-50 text-black rounded-lg border-4 border-black hover:bg-red-400 font-bold text-4xl\">\n              FIRE\n            <span v-if=\"fireHelpVisible\" class=\"absolute top-0 left-0 right-0 bottom-0 bg-black bg-opacity-50 flex justify-center items-center text-white text-2xl\">\n              Click to fire!\n            </span>\n          </button>\n        </div>\n\n        <!-- Row flex for money, time and so on -->\n        <div class =\"flex flex-rows space-x-8\">\n\n          <div class =\"flex flex-col space-y-4\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ time }} (s)</h1>\n            </div>\n            <div class = \"w-16 h-16\" style=\"background: url('assets/time_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-2\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ money }}$</h1>\n            </div>\n            <div class = \"w-20 h-20\" style=\"background: url('assets/money_bag_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-2, items-center\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ fuel }}/{{ fuelMax }}</h1>\n            </div>\n            <div class = \"w-20 h-20\" style=\"background: url('assets/fuel_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n          <div class =\"flex flex-col space-y-3\">\n            <div class=\"font-bold text-white text-2xl\">\n              <h1>{{ wins }}win</h1>\n            </div>\n            <div class = \"w-16 h-16\" style=\"background: url('assets/trophy_icon.png') no-repeat center center; background-size: cover;\"></div>\n          </div>\n\n        </div>\n\n        <!-- Pause button, absolute position from the bar-->\n        <div class=\"relative mb-16\">\n          <div class=\"w-20 h-20\" style=\"background: url('assets/pause_icon.png') no-repeat center center; background-size: cover;\"></div>\n        </div>\n\n        \n        \n      </div>\n\n    </div>\n      <canvas \n        ref=\"gameCanvas\" \n        :width=\"canvasWidth\" \n        :height=\"canvasHeight\" \n        class=\"border border-gray-700 m-auto\"\n      ></canvas>\n\n  </template>\n  \n  <script>\n  export default {\n    name: \"GameScreen\",\n    data() {\n      return {\n        canvasWidth: 1280,\n        canvasHeight: 720,\n        terrain: [],\n        player1: {\n          x: 100,\n          y: 370,\n          size: 40,\n          angle: 45,\n          power: 50,\n          tankColor: \"green\",\n          name: \"DJ Khaled\",\n          health: 100,\n        },\n        wind: 0,\n        missile: null,\n        angle: 45,\n        power: 50,\n        gameOver: false,\n        fireHelpVisible: false,\n        time: 10,\n        money: 4000,\n        fuel: 100,\n        fuelMax: 250,\n        wins: 1,\n      };\n    },\n    mounted() {\n      this.wind = 0;//Math.floor(Math.random() * 100 - 50); \n      this.player1.tankColor = \"green\"; //this.$route.query.color;\n      this.startTimer();\n      this.generateTerrain();\n      this.renderGame();\n    },\n    methods: {\n      showFireHelp() {\n        this.fireHelpVisible = true;\n      },\n      hideFireHelp() {\n        this.fireHelpVisible = false;\n      },\n\n      drawPlayerNames() {\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.font = \"40px Montserrat\";\n        ctx.fillStyle = \"black\";\n        ctx.textAlign = \"left\";\n        ctx.fillText(this.player1.name, 10, 60);\n        ctx.textAlign = \"right\";\n        ctx.fillText(\"Player 2\", this.canvasWidth -10, 60);\n      },\n\n      drawPlayerHealth(){\n        const canvas = this.$refs.canvas;\n        const ctx = canvas.getContext('2d');\n\n        // Draw metallic border\n        ctx.fillStyle = '#C0C0C0'; // Metallic color\n        ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        // Draw red fill\n        ctx.fillStyle = '#FF0000'; // Red color\n        ctx.fillRect(10, 10, 320, 80); // Adjusted for border thickness\n\n        // Draw black remaining progress\n        ctx.fillStyle = '#000000'; // Black color\n        ctx.fillRect(330, 10, 60, 80); // Adjusted for border thickness\n\n        // Draw text\n        ctx.fillStyle = '#000000'; // Text color\n        ctx.font = '40px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('80/100', this.canvasWidth / 2, this.canvasHeight / 2);\n      },\n\n      startTimer() {\n        setInterval(() => {\n          if (this.time > 0) {\n            this.time--;\n          } else {\n            this.gameOver = true;\n          }\n        }, 1000);\n      },\n\n      generateTerrain() {\n        // Generate a simple random terrain within 2/3 of the canvas height\n        const maxTerrainHeight = (this.canvasHeight * 2) / 3;\n        this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n          const baseHeight = maxTerrainHeight; // Base height is 2/3 of the canvas height\n          const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n          return baseHeight + variation;\n        });\n      },\n\n      fireMissile() {\n        const startX = this.player1.x + 15;\n        const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n        const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n        const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n        const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n        const endY = this.canvasHeight;\n  \n        this.missile = {\n          t: 0,\n          startX,\n          startY,\n          controlX,\n          controlY,\n          endX,\n          endY,\n        };\n  \n        this.animateMissile();\n      },\n      animateMissile() {\n        if (!this.missile) return;\n  \n        const { t, startX, startY, controlX, controlY, endX, endY } = this.missile;\n  \n        const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n        const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n  \n        this.missile.t += 0.01;\n        if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n          this.explodeTerrain(x, y);\n          this.missile = null;\n          this.gameOver = true;\n          return;\n        }\n  \n        this.renderGame();\n  \n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n  \n        requestAnimationFrame(this.animateMissile);\n      },\n      checkTerrainCollision(x, y) {\n        // Check if the missile hit the terrain\n        return y >= this.terrain[Math.floor(x)];\n      },\n      explodeTerrain(x, y) {\n        // Create a circular explosion in the terrain\n        const explosionRadius = 20;\n        for (let i = -explosionRadius; i <= explosionRadius; i++) {\n          const pos = Math.floor(x) + i;\n          if (pos >= 0 && pos < this.canvasWidth) {\n            const distance = Math.sqrt(i * i);\n            if (distance <= explosionRadius) {\n              const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n              this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n            }\n          }\n        }\n        this.renderGame();\n        this.wind = 0;//Math.floor(Math.random() * 100 - 50); \n\n      },\n      renderGame() {\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n        \n        //Draw player names\n        this.drawPlayerNames();\n\n        //Draw player health\n        this.drawPlayerHealth();\n\n        // Draw the terrain\n        this.drawTerrain(ctx);\n  \n        // Draw player 1's tank\n        this.drawTank(ctx, this.player1);\n      },\n      drawTerrain(ctx) {\n        ctx.beginPath();\n        ctx.moveTo(0, this.canvasHeight);\n        for (let x = 0; x < this.terrain.length; x++) {\n          ctx.lineTo(x, this.terrain[x]);\n        }\n        ctx.lineTo(this.canvasWidth, this.canvasHeight);\n        ctx.closePath();\n        ctx.fillStyle = \"saddlebrown\";\n        ctx.fill();\n      },\n      drawTank(ctx, player) {\n        ctx.save();\n        ctx.translate(player.x, this.terrain[Math.floor(player.x)] - player.size / 2);\n  \n        // Draw the tank body\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n  \n        // Draw the tank turret\n        const turretLength = player.size * 0.7;\n        ctx.translate(0, -player.size / 7);\n        ctx.rotate((-this.angle * Math.PI) / 180);\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(0, -5, turretLength, 10);\n  \n        ctx.restore();\n      },\n    },\n  };\n  </script>\n\n<style scoped>\n@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');\n\ncanvas {\n  font-family: 'Montserrat', sans-serif;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}