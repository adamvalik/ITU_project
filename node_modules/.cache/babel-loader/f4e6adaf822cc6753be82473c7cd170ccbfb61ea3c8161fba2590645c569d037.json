{"ast":null,"code":"export default {\n  name: \"GameScreen\",\n  data() {\n    return {\n      canvasWidth: 1280,\n      canvasHeight: 720,\n      terrain: [],\n      player1: {\n        x: 100,\n        y: 370,\n        size: 40,\n        angle: 45,\n        power: 50,\n        tankColor: \"green\"\n      },\n      wind: 0,\n      missile: null,\n      angle: 45,\n      power: 50,\n      gameOver: false\n    };\n  },\n  mounted() {\n    this.wind = Math.floor(Math.random() * 100 - 50);\n    this.player1.tankColor = \"green\"; //this.$route.query.color;\n    this.generateTerrain();\n    this.renderGame();\n  },\n  methods: {\n    generateTerrain() {\n      // Generate a simple random terrain\n      this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n        const baseHeight = this.canvasHeight - 200;\n        const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n        return baseHeight + variation;\n      });\n    },\n    fireMissile() {\n      const startX = this.player1.x + 15;\n      const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n      const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n      const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n      const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n      const endY = this.canvasHeight;\n      this.missile = {\n        t: 0,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      };\n      this.animateMissile();\n    },\n    animateMissile() {\n      if (!this.missile) return;\n      const {\n        t,\n        startX,\n        startY,\n        controlX,\n        controlY,\n        endX,\n        endY\n      } = this.missile;\n      const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n      const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n      this.missile.t += 0.01;\n      if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n        this.explodeTerrain(x, y);\n        this.missile = null;\n        this.gameOver = true;\n        return;\n      }\n      this.renderGame();\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, 2 * Math.PI);\n      ctx.fillStyle = \"red\";\n      ctx.fill();\n      requestAnimationFrame(this.animateMissile);\n    },\n    checkTerrainCollision(x, y) {\n      // Check if the missile hit the terrain\n      return y >= this.terrain[Math.floor(x)];\n    },\n    explodeTerrain(x, y) {\n      // Create a circular explosion in the terrain\n      const explosionRadius = 20;\n      for (let i = -explosionRadius; i <= explosionRadius; i++) {\n        const pos = Math.floor(x) + i;\n        if (pos >= 0 && pos < this.canvasWidth) {\n          const distance = Math.sqrt(i * i);\n          if (distance <= explosionRadius) {\n            const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n            this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n          }\n        }\n      }\n      this.renderGame();\n      this.wind = Math.floor(Math.random() * 100 - 50);\n    },\n    renderGame() {\n      const canvas = this.$refs.gameCanvas;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // Draw the terrain\n      this.drawTerrain(ctx);\n\n      // Draw player 1's tank\n      this.drawTank(ctx, this.player1);\n    },\n    drawTerrain(ctx) {\n      ctx.beginPath();\n      ctx.moveTo(0, this.canvasHeight);\n      for (let x = 0; x < this.terrain.length; x++) {\n        ctx.lineTo(x, this.terrain[x]);\n      }\n      ctx.lineTo(this.canvasWidth, this.canvasHeight);\n      ctx.closePath();\n      ctx.fillStyle = \"saddlebrown\";\n      ctx.fill();\n    },\n    drawTank(ctx, player) {\n      ctx.save();\n      ctx.translate(player.x, this.terrain[Math.floor(player.x)] - player.size / 2);\n\n      // Draw the tank body\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n\n      // Draw the tank turret\n      const turretLength = player.size * 0.7;\n      ctx.translate(0, -player.size / 7);\n      ctx.rotate(-this.angle * Math.PI / 180);\n      ctx.fillStyle = this.player1.tankColor;\n      ctx.fillRect(0, -5, turretLength, 10);\n      ctx.restore();\n    }\n  }\n};","map":{"version":3,"names":["name","data","canvasWidth","canvasHeight","terrain","player1","x","y","size","angle","power","tankColor","wind","missile","gameOver","mounted","Math","floor","random","generateTerrain","renderGame","methods","Array","fill","map","_","baseHeight","variation","sin","fireMissile","startX","startY","controlX","cos","PI","controlY","endX","endY","t","animateMissile","checkTerrainCollision","explodeTerrain","canvas","$refs","gameCanvas","ctx","getContext","beginPath","arc","fillStyle","requestAnimationFrame","explosionRadius","i","pos","distance","sqrt","impactDepth","max","clearRect","drawTerrain","drawTank","moveTo","length","lineTo","closePath","player","save","translate","fillRect","turretLength","rotate","restore"],"sources":["/home/antiphy/ITU/ITU_project/src/views/GameScreen.vue"],"sourcesContent":["<template>\n    <div class=\"game-screen text-center mt-10\">\n      <h1 class=\"text-2xl font-bold mb-4\">Tanks</h1>\n      <label class=\"block\"><span class=\"font-bold\">Wind: <span class=\"text-2xl\">{{ wind }}</span> </span>  (positive for right, negative for left)</label>\n      <div class=\"controls mt-4 flex justify-center items-center gap-4\">\n        <div>\n          <label class=\"block font-bold\">Angle: {{ angle }}Â°</label>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"90\" \n            v-model=\"angle\" \n            class=\"w-32\"\n          />\n        </div>\n        <div>\n          <label class=\"block font-bold\">Power: {{ power }}</label>\n          <input \n            type=\"range\" \n            min=\"10\" \n            max=\"100\" \n            v-model=\"power\" \n            class=\"w-32\"\n          />\n        </div>\n      </div>\n      <!-- <img\n        src=\"assets/metalbg.png\"\n        alt=\"Game Overlay\"\n        class=\"w-1280 h-150 opacity-75 pointer-events-none m-auto\"\n      /> -->\n      <div\n      class=\"px-4 py-2 bg-black bg-opacity-50 text-white m-auto\"\n      style=\"background: url('assets/metalbg.png') no-repeat center center; background-size: cover; width: 1280px; height: 150px;\">\n        <button @click=\"fireMissile\" class=\"px-6 py-2 bg-red-500 bg-opacity-50 text-black rounded hover:bg-red-600\" style=\"width: 200px;\">FIRE</button>\n        </div>\n    </div>\n      <canvas \n        ref=\"gameCanvas\" \n        :width=\"canvasWidth\" \n        :height=\"canvasHeight\" \n        class=\"border border-gray-700 m-auto\"\n      ></canvas>\n\n  </template>\n  \n  <script>\n  export default {\n    name: \"GameScreen\",\n    data() {\n      return {\n        canvasWidth: 1280,\n        canvasHeight: 720,\n        terrain: [],\n        player1: {\n          x: 100,\n          y: 370,\n          size: 40,\n          angle: 45,\n          power: 50,\n          tankColor: \"green\",\n        },\n        wind: 0,\n        missile: null,\n        angle: 45,\n        power: 50,\n        gameOver: false,\n      };\n    },\n    mounted() {\n      this.wind = Math.floor(Math.random() * 100 - 50); \n      this.player1.tankColor = \"green\"; //this.$route.query.color;\n      this.generateTerrain();\n      this.renderGame();\n    },\n    methods: {\n      generateTerrain() {\n        // Generate a simple random terrain\n        this.terrain = new Array(this.canvasWidth).fill(0).map((_, x) => {\n          const baseHeight = this.canvasHeight - 200;\n          const variation = Math.sin(x * 0.06) * 15 + Math.sin(x * 0.1) * 10 + Math.sin(x * 0.01) * 50;\n          return baseHeight + variation;\n        });\n      },\n      fireMissile() {\n        const startX = this.player1.x + 15;\n        const startY = this.player1.y - 15; //this.terrain[Math.floor(player.x)] - player.size / 2\n        const controlX = startX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 4;\n        const controlY = startY - Math.sin(this.angle * (Math.PI / 180)) * this.power * 5;\n        const endX = controlX + Math.cos(this.angle * (Math.PI / 180)) * this.power * 5 + this.wind * 8;\n        const endY = this.canvasHeight;\n  \n        this.missile = {\n          t: 0,\n          startX,\n          startY,\n          controlX,\n          controlY,\n          endX,\n          endY,\n        };\n  \n        this.animateMissile();\n      },\n      animateMissile() {\n        if (!this.missile) return;\n  \n        const { t, startX, startY, controlX, controlY, endX, endY } = this.missile;\n  \n        const x = (1 - t) * (1 - t) * startX + 2 * (1 - t) * t * controlX + t * t * endX;\n        const y = (1 - t) * (1 - t) * startY + 2 * (1 - t) * t * controlY + t * t * endY;\n  \n        this.missile.t += 0.01;\n        if (this.missile.t >= 1 || this.checkTerrainCollision(x, y)) {\n          this.explodeTerrain(x, y);\n          this.missile = null;\n          this.gameOver = true;\n          return;\n        }\n  \n        this.renderGame();\n  \n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.beginPath();\n        ctx.arc(x, y, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = \"red\";\n        ctx.fill();\n  \n        requestAnimationFrame(this.animateMissile);\n      },\n      checkTerrainCollision(x, y) {\n        // Check if the missile hit the terrain\n        return y >= this.terrain[Math.floor(x)];\n      },\n      explodeTerrain(x, y) {\n        // Create a circular explosion in the terrain\n        const explosionRadius = 20;\n        for (let i = -explosionRadius; i <= explosionRadius; i++) {\n          const pos = Math.floor(x) + i;\n          if (pos >= 0 && pos < this.canvasWidth) {\n            const distance = Math.sqrt(i * i);\n            if (distance <= explosionRadius) {\n              const impactDepth = Math.sqrt(explosionRadius * explosionRadius - distance * distance);\n              this.terrain[pos] = Math.max(this.terrain[pos], y + impactDepth);\n            }\n          }\n        }\n        this.renderGame();\n        this.wind = Math.floor(Math.random() * 100 - 50); \n\n      },\n      renderGame() {\n        const canvas = this.$refs.gameCanvas;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n  \n        // Draw the terrain\n        this.drawTerrain(ctx);\n  \n        // Draw player 1's tank\n        this.drawTank(ctx, this.player1);\n      },\n      drawTerrain(ctx) {\n        ctx.beginPath();\n        ctx.moveTo(0, this.canvasHeight);\n        for (let x = 0; x < this.terrain.length; x++) {\n          ctx.lineTo(x, this.terrain[x]);\n        }\n        ctx.lineTo(this.canvasWidth, this.canvasHeight);\n        ctx.closePath();\n        ctx.fillStyle = \"saddlebrown\";\n        ctx.fill();\n      },\n      drawTank(ctx, player) {\n        ctx.save();\n        ctx.translate(player.x, this.terrain[Math.floor(player.x)] - player.size / 2);\n  \n        // Draw the tank body\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(-player.size / 2, -player.size / 4, player.size, player.size / 2);\n  \n        // Draw the tank turret\n        const turretLength = player.size * 0.7;\n        ctx.translate(0, -player.size / 7);\n        ctx.rotate((-this.angle * Math.PI) / 180);\n        ctx.fillStyle = this.player1.tankColor;\n        ctx.fillRect(0, -5, turretLength, 10);\n  \n        ctx.restore();\n      },\n    },\n  };\n  </script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}